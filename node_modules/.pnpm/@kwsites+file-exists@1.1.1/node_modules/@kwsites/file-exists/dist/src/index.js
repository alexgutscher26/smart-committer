"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const debug_1 = __importDefault(require("debug"));
const log = debug_1.default('@kwsites/file-exists');
/**
 * Checks if the given path represents a file or directory based on provided conditions.
 *
 * @param {string} path - The path to be checked.
 * @param {boolean} isFile - Flag indicating whether the path should represent a file.
 * @param {boolean} isDirectory - Flag indicating whether the path should represent a directory.
 * @returns {boolean} - True if the path meets the specified conditions, false otherwise.
 * @throws {Error} - Throws an error if an unexpected exception occurs during the check.
 *
 * @example
 * // Check if 'path/to/file.txt' is a file
 * const result = check('path/to/file.txt', true, false);
 * console.log(result); // Output: true or false
 */
function check(path, isFile, isDirectory) {
    log(`checking %s`, path);
    try {
        const stat = fs_1.statSync(path);
        if (stat.isFile() && isFile) {
            log(`[OK] path represents a file`);
            return true;
        }
        if (stat.isDirectory() && isDirectory) {
            log(`[OK] path represents a directory`);
            return true;
        }
        log(`[FAIL] path represents something other than a file or directory`);
        return false;
    }
    catch (e) {
        if (e.code === 'ENOENT') {
            log(`[FAIL] path is not accessible: %o`, e);
            return false;
        }
        log(`[FATAL] %o`, e);
        throw e;
    }
}
/**
 * Synchronously validates if a given path exists as either a file or directory based on specified types.
 *
 * @param {string} path - The path to check for existence.
 * @param {number} [type=exports.READABLE] - The type of validation, can be a combination of `exports.FILE` and `exports.FOLDER`.
 * @returns {boolean} - Returns true if the path exists as specified by the type(s), otherwise false.
 *
 * Example:
 *   const isFile = exists('/path/to/file', exports.FILE);
 *   const isFolder = exists('/path/to/folder', exports.FOLDER);
 */
function exists(path, type = exports.READABLE) {
    return check(path, (type & exports.FILE) > 0, (type & exports.FOLDER) > 0);
}
exports.exists = exists;
/**
 * Constant representing a file
 */
exports.FILE = 1;
/**
 * Constant representing a folder
 */
exports.FOLDER = 2;
/**
 * Constant representing either a file or a folder
 */
exports.READABLE = exports.FILE + exports.FOLDER;
//# sourceMappingURL=index.js.map