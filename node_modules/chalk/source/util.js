'use strict';

const stringReplaceAll = (string, substring, replacer) => {
	let index = string.indexOf(substring);
	if (index === -1) {
		return string;
	}

	const substringLength = substring.length;
	let endIndex = 0;
	let returnValue = '';
	do {
		returnValue += string.substr(endIndex, index - endIndex) + substring + replacer;
		endIndex = index + substringLength;
		index = string.indexOf(substring, endIndex);
	} while (index !== -1);

	returnValue += string.substr(endIndex);
	return returnValue;
};

/**
 * Encases carriage return-line feed sequences in a string with specified prefixes and postfixes, starting from the first occurrence of each sequence.
 *
 * @param {string} string - The input string to process.
 * @param {string} prefix - The prefix to add before each carriage return-line feed sequence.
 * @param {string} postfix - The postfix to add after each carriage return-line feed sequence.
 * @param {number} index - The starting index within the string where the search for carriage return-line feed sequences begins.
 * @returns {string} - The modified string with specified prefixes and postfixes added to carriage return-line feed sequences.
 *
 * @example
 * // Returns 'Hello\r\nWorld'
 * stringEncaseCRLFWithFirstIndex('Hello\nWorld', '', '', 0);
 *
 * @throws {TypeError} - If any of the input parameters are not of the expected type.
 */
const stringEncaseCRLFWithFirstIndex = (string, prefix, postfix, index) => {
	let endIndex = 0;
	let returnValue = '';
	do {
		const gotCR = string[index - 1] === '\r';
		returnValue += string.substr(endIndex, (gotCR ? index - 1 : index) - endIndex) + prefix + (gotCR ? '\r\n' : '\n') + postfix;
		endIndex = index + 1;
		index = string.indexOf('\n', endIndex);
	} while (index !== -1);

	returnValue += string.substr(endIndex);
	return returnValue;
};

module.exports = {
	stringReplaceAll,
	stringEncaseCRLFWithFirstIndex
};
