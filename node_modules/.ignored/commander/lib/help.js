const { humanReadableArgName } = require('./argument.js');

/**
 * TypeScript import types for JSDoc, used by Visual Studio Code IntelliSense and `npm run typescript-checkJS`
 * https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html#import-types
 * @typedef { import("./argument.js").Argument } Argument
 * @typedef { import("./command.js").Command } Command
 * @typedef { import("./option.js").Option } Option
 */

// Although this is a class, methods are static in style to allow override using subclass or just functions.
class Help {
  constructor() {
    this.helpWidth = undefined;
    this.sortSubcommands = false;
    this.sortOptions = false;
    this.showGlobalOptions = false;
  }

  /**
   * Get an array of the visible subcommands. Includes a placeholder for the implicit help command, if there is one.
   *
   * @param {Command} cmd
   * @returns {Command[]}
   */

  visibleCommands(cmd) {
    const visibleCommands = cmd.commands.filter(cmd => !cmd._hidden);
    if (cmd._hasImplicitHelpCommand()) {
      // Create a command matching the implicit help command.
      const [, helpName, helpArgs] = cmd._helpCommandnameAndArgs.match(/([^ ]+) *(.*)/);
      const helpCommand = cmd.createCommand(helpName)
        .helpOption(false);
      helpCommand.description(cmd._helpCommandDescription);
      if (helpArgs) helpCommand.arguments(helpArgs);
      visibleCommands.push(helpCommand);
    }
    if (this.sortSubcommands) {
      visibleCommands.sort((a, b) => {
        // @ts-ignore: overloaded return type
        return a.name().localeCompare(b.name());
      });
    }
    return visibleCommands;
  }

  /**
   * Compare options for sort.
   *
   * @param {Option} a
     *
     /**
      * Get an array of the visible subcommands. Includes a placeholder for the implicit help command, if there is one.
      *
      * @param {Command} cmd - The command object to retrieve visible subcommands from.
      * @returns {Command[]} An array of visible subcommand objects.
      */
     * @param {Object} option - The option object containing `short` and `long` properties.
     * @returns {string} - The generated sort key. If the option has a `short` property, it returns the `short` value with any leading '-' removed. Otherwise, it returns the `long` value with any leading '--' removed.
     *
     * @example
     * const option1 = { short: '-h', long: '--help' };
     * console.log(getSortKey(option1)); // Output: "h"
     *
     * const option2 = { short: null, long: '--version' };
     * console.log(getSortKey(option2)); // Output: "version"
     */
    const getSortKey = (option) => {
      // WYSIWYG for order displayed in help. Short used for comparison if present. No special handling for negated.
      return option.short ? option.short.replace(/^-/, '') : option.long.replace(/^--/, '');
    };
    return getSortKey(a).localeCompare(getSortKey(b));
  }

  /**
   * Get an array of the visible options. Includes a placeholder for the implicit help option, if there is one.
   *
    /**
     * Compare two options based on their sort key for ordering in help displays.
     *
     * @param {Option} a - The first option to compare.
     * @param {Option} b - The second option to compare.
     * @returns {number} A negative number if `a` should be sorted before `b`, zero if they are equal, or a positive number if `a` should be sorted after `b`.
     */
    const showShortHelpFlag = cmd._hasHelpOption && cmd._helpShortFlag && !cmd._findOption(cmd._helpShortFlag);
    const showLongHelpFlag = cmd._hasHelpOption && !cmd._findOption(cmd._helpLongFlag);
    if (showShortHelpFlag || showLongHelpFlag) {
      let helpOption;
      if (!showShortHelpFlag) {
        helpOption = cmd.createOption(cmd._helpLongFlag, cmd._helpDescription);
      } else if (!showLongHelpFlag) {
        helpOption = cmd.createOption(cmd._helpShortFlag, cmd._helpDescription);
      visibleOptions.sort(this.compareOptions);
    /**
     * Get an array of the visible options. Includes a placeholder for the implicit help option, if there is one.
     *
     * @param {Command} cmd - The command object containing the options to filter and manipulate.
     * @returns {Option[]} An array of visible Option objects.
     */
    }
    return visibleOptions;
  }

  /**
   * Get an array of the visible global options. (Not including help.)
   *
   * @param {Command} cmd
   * @returns {Option[]}
   */

  visibleGlobalOptions(cmd) {
    if (!this.showGlobalOptions) return [];

    const globalOptions = [];
    for (let ancestorCmd = cmd.parent; ancestorCmd; ancestorCmd = ancestorCmd.parent) {
      const visibleOptions = ancestorCmd.options.filter((option) => !option.hidden);
      globalOptions.push(...visibleOptions);
    }
    if (this.sortOptions) {
      globalOptions.sort(this.compareOptions);
    }
   * @param {Command} cmd
   /**
    * Get an array of the visible global options. (Not including help.)
    *
    * @param {Command} cmd - The current command object.
    * @returns {Option[]} An array of visible global options.
    */
   * @returns {Argument[]}
   */

  visibleArguments(cmd) {
    // Side effect! Apply the legacy descriptions before the arguments are displayed.
    if (cmd._argsDescription) {
      cmd.registeredArguments.forEach(argument => {
        argument.description = argument.description || cmd._argsDescription[argument.name()] || '';
      });
    }

    // If there are any arguments with a description then return all the arguments.
    if (cmd.registeredArguments.find(argument => argument.description)) {
      return cmd.registeredArguments;
   *
   /**
    * Get an array of the arguments if any have a description.
    *
    * @param {Command} cmd - The command object that contains the arguments.
    * @returns {Argument[]} An array of Argument objects with descriptions, or an empty array if no arguments have descriptions.
    *
    * Example:
    * const args = visibleArguments(myCommand);
    * console.log(args); // Output: [ { name: 'arg1', description: 'Description of arg1' }, ... ]
    */
   * @param {Command} cmd
   * @returns {string}
   */

  subcommandTerm(cmd) {
    // Legacy. Ignores custom usage string, and nested commands.
    const args = cmd.registeredArguments.map(arg => humanReadableArgName(arg)).join(' ');
    return cmd._name +
      (cmd._aliases[0] ? '|' + cmd._aliases[0] : '') +
      (cmd.options.length ? ' [options]' : '') + // simplistic check for non-help option
      (args ? ' ' + args : '');
  }

  /**
   * Get the option term to show in the list of options.
    return option.flags;
  /**
   * Get the command term to show in the list of subcommands.
   *
   * @param {Command} cmd - The command object for which to generate the subcommand term.
   * @returns {string} - The formatted subcommand term as a string.
   */
  }

  /**
   * Get the argument term to show in the list of arguments.
   *
   * @param {Argument} argument
   * @returns {string}
   */

   *
   /**
    * Get the option term to show in the list of options.
    *
    * @param {Option} option - The option object from which the term will be extracted.
    * @returns {string} - The term to display for the given option.
    */
   * @param {Command} cmd
   * @param {Help} helper
   * @returns {number}
   */

  /**
   * Get the term to show for an argument in the list of arguments.
   *
   * @param {Argument} argument - The argument object from which to retrieve the name.
   * @returns {string} - The name of the argument, suitable for display in a list.
   */
  /**
   * Get the longest option term length.
   *
   * @param {Command} cmd
    }, 0);
  /**
   * Calculates the length of the longest subcommand term.
   *
   * @param {Command} cmd - The command object to process.
   * @param {Help} helper - The help object providing utility functions.
   * @returns {number} The length of the longest subcommand term.
   */
  }

  /**
   * Get the longest global option term length.
   *
   * @param {Command} cmd
    }, 0);
  /**
   * Get the length of the longest option term from a command's visible options.
   *
   * @param {Command} cmd - The command object containing various properties and methods.
   * @param {Help} helper - An object that provides utility functions for generating help messages.
   * @returns {number} The length of the longest option term found among the visible options.
   * @throws {Error} If 'cmd' or 'helper' is not provided.
   */
  }

  /**
   * Get the longest argument term length.
   *
   * @param {Command} cmd
    }, 0);
  /**
   * Get the length of the longest term for all visible global options in a given command.
   *
   * @param {Command} cmd - The command object containing global options.
   * @param {Help} helper - Helper object providing utility functions for handling help information.
   * @returns {number} The length of the longest option term among all visible global options.
   *
   * @throws {Error} If `cmd` is not a valid Command object or if `helper` does not provide the necessary methods.
   */
  }

  /**
   * Get the command usage to be displayed at the top of the built-in help.
   *
   * @param {Command} cmd
      cmdName = cmdName + '|' + cmd._aliases[0];
    /**
     * Get the longest argument term length for a given command.
     *
     * @param {Command} cmd - The command object for which to determine the longest argument term length.
     * @param {Help} helper - The help object providing utility methods for command and argument handling.
     * @returns {number} The length of the longest argument term.
     * @throws {Error} If `cmd` or `helper` is not provided as valid arguments.
     */
    }
    let ancestorCmdNames = '';
    for (let ancestorCmd = cmd.parent; ancestorCmd; ancestorCmd = ancestorCmd.parent) {
      ancestorCmdNames = ancestorCmd.name() + ' ' + ancestorCmdNames;
    }
    return ancestorCmdNames + cmdName + ' ' + cmd.usage();
   * @returns {string}
   /**
    * Get the command usage to be displayed at the top of the built-in help.
    *
    * @param {Command} cmd - The command object for which to generate the usage string.
    * @returns {string} The formatted command usage string.
    * @throws {Error} If the command or its parent is not properly initialized.
    */
   */

  commandDescription(cmd) {
    // @ts-ignore: overloaded return type
    return cmd.description();
  }

  /**
   * Get the subcommand summary to show in the list of subcommands.
   * (Fallback to description for backwards compatibility.)
   *
   * @param {Command} cmd
   * @returns {string}

  /**
   * Get the description for the command.
   *
   * @param {Command} cmd - The command object whose description is to be retrieved.
   * @returns {string} - The description of the command.
   */
  /**
   * Get the option description to show in the list of options.
   *
   * @param {Option} option
   * @return {string}
        // use stringify to match the display of the default value
        /**
         * Get the subcommand summary to show in the list of subcommands. Fallback to description for backwards compatibility.
         *
         * @param {Command} cmd - The command object from which the summary or description is retrieved.
         * @returns {string} - The summary or description of the subcommand.
         */
        `choices: ${option.argChoices.map((choice) => JSON.stringify(choice)).join(', ')}`);
    }
    if (option.defaultValue !== undefined) {
      // default for boolean and negated more for programmer than end user,
      // but show true/false for boolean option as may be for hand-rolled env or config processing.
    // preset for boolean and negated are more for programmer than end user
    /**
     * Get the option description to show in the list of options.
     *
     * @param {Option} option - The option object containing details about the option.
     * @return {string} - A string describing the option, including any extra information like choices, default values, presets, and environment variables.
     */
    if (option.presetArg !== undefined && option.optional) {
      extraInfo.push(`preset: ${JSON.stringify(option.presetArg)}`);
    }
    if (option.envVar !== undefined) {
      extraInfo.push(`env: ${option.envVar}`);
    }
    if (extraInfo.length > 0) {
      return `${option.description} (${extraInfo.join(', ')})`;
    }

    return option.description;
  }

  /**
   * Get the argument description to show in the list of arguments.
   *
   * @param {Argument} argument
   * @return {string}
   */

  argumentDescription(argument) {
    const extraInfo = [];
    if (argument.argChoices) {
      extraInfo.push(
        // use stringify to match the display of the default value
        `choices: ${argument.argChoices.map((choice) => JSON.stringify(choice)).join(', ')}`);
    }
    if (argument.defaultValue !== undefined) {
      extraInfo.push(`default: ${argument.defaultValueDescription || JSON.stringify(argument.defaultValue)}`);
    }
    if (extraInfo.length > 0) {
    return argument.description;
  /**
   * Get the argument description to show in the list of arguments.
   *
   * @param {Argument} argument - The argument object to generate a description for.
   * @return {string} - A string containing the argument description, including any choices or default values.
   */
  }

  /**
   * Generate the built-in help text.
   *
   * @param {Command} cmd
   * @param {Help} helper
   * @returns {string}
   */

  formatHelp(cmd, helper) {
    const termWidth = helper.padWidth(cmd, helper);
    const helpWidth = helper.helpWidth || 80;
    const itemIndentWidth = 2;
    const itemSeparatorWidth = 2; // between term and description
    /**
     * Formats an item by adding a description and wrapping it to fit within specified width constraints.
     *
     * @param {string} term - The term or keyword to be formatted.
     * @param {string} [description] - Optional description text to accompany the term.
      return term;
    /**
     * Generate the built-in help text for a command.
     *
     * @param {Command} cmd - The command object to generate help text for.
     * @param {Help} helper - Helper object providing various methods and properties.
     * @returns {string} - The formatted help text as a string.
     */
    }
    /**
     * Formats an array of strings into a single string with each item on a new line and indented.
     *
     * @param {string[]} textArray - The array of strings to be formatted.
     * @return {string} - The formatted string with items separated by newline characters and prefixed by spaces.
     * @throws {TypeError} if the input is not an array or if any element in the array is not a string.
     *
     * Example:
     * formatList(['Item 1', 'Item 2']);
     * // Returns: " Item 1\n Item 2"
     */
    function formatList(textArray) {
      return textArray.join('\n').replace(/^/gm, ' '.repeat(itemIndentWidth));
    }

    // Usage
    let output = [`Usage: ${helper.commandUsage(cmd)}`, ''];

    // Description
    const commandDescription = helper.commandDescription(cmd);
    if (commandDescription.length > 0) {
      output = output.concat([helper.wrap(commandDescription, helpWidth, 0), '']);
    }

    // Arguments
    const argumentList = helper.visibleArguments(cmd).map((argument) => {
      return formatItem(helper.argumentTerm(argument), helper.argumentDescription(argument));
    });
    if (argumentList.length > 0) {
      output = output.concat(['Arguments:', formatList(argumentList), '']);
    }

    // Options
    const optionList = helper.visibleOptions(cmd).map((option) => {
      return formatItem(helper.optionTerm(option), helper.optionDescription(option));
    });
    if (optionList.length > 0) {
      output = output.concat(['Options:', formatList(optionList), '']);
    }

    if (this.showGlobalOptions) {
      const globalOptionList = helper.visibleGlobalOptions(cmd).map((option) => {
        return formatItem(helper.optionTerm(option), helper.optionDescription(option));
      });
      if (globalOptionList.length > 0) {
        output = output.concat(['Global Options:', formatList(globalOptionList), '']);
      }
    }

    // Commands
    const commandList = helper.visibleCommands(cmd).map((cmd) => {
      return formatItem(helper.subcommandTerm(cmd), helper.subcommandDescription(cmd));
    });
    if (commandList.length > 0) {
      output = output.concat(['Commands:', formatList(commandList), '']);
    }

    return output.join('\n');
  }


  /**
   * Calculate the padding width required based on the longest term lengths of options,
   * global options, subcommands, and arguments within a command.
   *
   * @param {Command} cmd - The command object for which to calculate the padding width.
   * @param {Help} helper - The help object containing utility functions to determine term lengths.
   * @returns {number} - The calculated padding width.
   */
  padWidth(cmd, helper) {
    return Math.max(
      helper.longestOptionTermLength(cmd, helper),
      helper.longestGlobalOptionTermLength(cmd, helper),
      helper.longestSubcommandTermLength(cmd, helper),
      helper.longestArgumentTermLength(cmd, helper)
    );
  }


  /**
   * Wrap the given string to width characters per line, with lines after the first indented.
   * Do not wrap if insufficient room for wrapping (minColumnWidth), or string is manually formatted.
   *
   * @param {string} str - The string to be wrapped.
   * @param {number} width - The maximum width of each line before wrapping.
   * @param {number} indent - The number of spaces to indent the first line.
   * @param {number} [minColumnWidth=40] - The minimum column width required for wrapping. Defaults to 40.
   * @return {string} - The wrapped string with appropriate indentation and line breaks.
   *
   * @example
   * wrap("This is a long string that needs to be wrapped.", 20, 4);
   * // returns "This is a long\nstring that needs\nto be wrapped."
   *
   * @example
   * wrap("   This string is already manually formatted.", 20, 4);
   * // returns "   This string is already manually formatted."
   */
  wrap(str, width, indent, minColumnWidth = 40) {
    // Full \s characters, minus the linefeeds.
    const indents = ' \\f\\t\\v\u00a0\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff';
    // Detect manually wrapped and indented strings by searching for line break followed by spaces.
    const manualIndent = new RegExp(`[\\n][${indents}]+`);
    if (str.match(manualIndent)) return str;
    // Do not wrap if not enough room for a wrapped column of text (as could end up with a word per line).
    const columnWidth = width - indent;
    if (columnWidth < minColumnWidth) return str;

    const leadingStr = str.slice(0, indent);
    const columnText = str.slice(indent).replace('\r\n', '\n');
    const indentString = ' '.repeat(indent);
    const zeroWidthSpace = '\u200B';
    const breaks = `\\s${zeroWidthSpace}`;
    // Match line end (so empty lines don't collapse),
    // or as much text as will fit in column, or excess text up to first break.
    const regex = new RegExp(`\n|.{1,${columnWidth - 1}}([${breaks}]|$)|[^${breaks}]+?([${breaks}]|$)`, 'g');
    const lines = columnText.match(regex) || [];
    return leadingStr + lines.map((line, i) => {
      if (line === '\n') return ''; // preserve empty lines
      return ((i > 0) ? indentString : '') + line.trimEnd();
    }).join('\n');
  }
}

exports.Help = Help;
