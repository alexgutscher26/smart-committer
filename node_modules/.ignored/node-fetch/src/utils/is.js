/**
 * Is.js
 *
 * Object type checks.
 */

const NAME = Symbol.toStringTag;

/**
 * Checks if the provided object is an instance of URLSearchParams.
 *
 * @param {*} object - The object to check.
 * @returns {boolean} - Returns true if the object is a URLSearchParams, otherwise false.
 *
 * Example:
 *   const params = new URLSearchParams('foo=bar&baz=qux');
 *   console.log(isURLSearchParameters(params)); // Output: true
 */
export const isURLSearchParameters = object => {
	return (
		typeof object === 'object' &&
		typeof object.append === 'function' &&
		typeof object.delete === 'function' &&
		typeof object.get === 'function' &&
		typeof object.getAll === 'function' &&
		typeof object.has === 'function' &&
		typeof object.set === 'function' &&
		typeof object.sort === 'function' &&
		object[NAME] === 'URLSearchParams'
	);
};

/**
 * Check if `object` is a W3C `Blob` object (which `File` inherits from)
 * @param {*} object - Object to check for
 * @returns {boolean} - Returns true if the object is a Blob, false otherwise.
 */
export const isBlob = object => {
	return (
		object &&
		typeof object === 'object' &&
		typeof object.arrayBuffer === 'function' &&
		typeof object.type === 'string' &&
		typeof object.stream === 'function' &&
		typeof object.constructor === 'function' &&
		/^(Blob|File)$/.test(object[NAME])
	);
};

/**
 * Determines if the provided object is an instance of AbortSignal or EventTarget.
 *
 * @param {*} object - The object to check for being an AbortSignal or EventTarget.
 * @returns {boolean} - Returns true if the object is an instance of AbortSignal or EventTarget, false otherwise.
 */
export const isAbortSignal = object => {
	return (
		typeof object === 'object' && (
			object[NAME] === 'AbortSignal' ||
			object[NAME] === 'EventTarget'
		)
	);
};

/**
 * Determines if the destination domain is a subdomain of or exactly matches the original domain.
 *
 * Both domains must already be in canonical form.
 * @param {string|URL} original - The original domain to compare against.
 * @param {string|URL} destination - The destination domain to check.
 * @returns {boolean} True if destination is a subdomain of or exactly matches the original, false otherwise.
 *
 * @example
 * // Returns true because 'sub.example.com' is a subdomain of 'example.com'
 * console.log(isDomainOrSubdomain('example.com', 'sub.example.com')); // true
 *
 * @example
 * // Returns true because the domains are exactly the same
 * console.log(isDomainOrSubdomain('example.com', 'example.com')); // true
 *
 * @example
 * // Returns false because 'example.org' is not a subdomain of 'example.com'
 * console.log(isDomainOrSubdomain('example.com', 'example.org')); // false
 */
export const isDomainOrSubdomain = (destination, original) => {
	const orig = new URL(original).hostname;
	const dest = new URL(destination).hostname;

	return orig === dest || orig.endsWith(`.${dest}`);
};

/**
 * Determines if two URLs share the same protocol.
 *
 * This function compares the protocols of two provided URLs. Both URLs should be in canonical form before calling this method.
 *
 * @param {string|URL} original - The first URL to compare, can be a string or a URL object.
 * @param {string|URL} destination - The second URL to compare, can be a string or a URL object.
 * @return {boolean} Returns `true` if both URLs use the same protocol, otherwise returns `false`.
 *
 * Example:
 * ```javascript
 * const result = isSameProtocol('https://example.com', 'https://another-example.com');
 * console.log(result); // true
 * ```
 */
export const isSameProtocol = (destination, original) => {
	const orig = new URL(original).protocol;
	const dest = new URL(destination).protocol;

	return orig === dest;
};
