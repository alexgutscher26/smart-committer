/**
 * Is.js
 *
 * Object type checks.
 */

const NAME = Symbol.toStringTag;

/**
 * Determines if the provided object is an instance of URLSearchParams.
 *
 * @param {*} object - The object to check for URLSearchParams identity.
 * @returns {boolean} - Returns `true` if the object is a URLSearchParams instance, otherwise `false`.
 */
export const isURLSearchParameters = object => {
	return (
		typeof object === 'object' &&
		typeof object.append === 'function' &&
		typeof object.delete === 'function' &&
		typeof object.get === 'function' &&
		typeof object.getAll === 'function' &&
		typeof object.has === 'function' &&
		typeof object.set === 'function' &&
		typeof object.sort === 'function' &&
		object[NAME] === 'URLSearchParams'
	);
};

/**
 * Checks if `object` is a W3C `Blob` object (which `File` inherits from).
 *
 * @param {*} object - The object to check for.
 * @return {boolean} Returns `true` if the object is a `Blob`, otherwise `false`.
 */
export const isBlob = object => {
	return (
		object &&
		typeof object === 'object' &&
		typeof object.arrayBuffer === 'function' &&
		typeof object.type === 'string' &&
		typeof object.stream === 'function' &&
		typeof object.constructor === 'function' &&
		/^(Blob|File)$/.test(object[NAME])
	);
};

/**
 * Checks if the provided `object` is an instance of `AbortSignal`.
 *
 * @param {*} object - The object to check.
 * @returns {boolean} - Returns `true` if `object` is an instance of `AbortSignal`, otherwise returns `false`.
 */
export const isAbortSignal = object => {
	return (
		typeof object === 'object' && (
			object[NAME] === 'AbortSignal' ||
			object[NAME] === 'EventTarget'
		)
	);
};

/**
 * Determines if the destination domain or subdomain matches the original domain.
 *
 * Both domains must already be in canonical form (e.g., 'example.com').
 *
 * @param {string|URL} destination - The URL to check if it is a subdomain or exact match of the original domain.
 * @param {string|URL} original - The base domain against which to check the destination.
 * @returns {boolean} - True if destination is a subdomain (or an exact match) of original, false otherwise.
 *
 * @example
 * isDomainOrSubdomain('sub.example.com', 'example.com'); // true
 * isDomainOrSubdomain('example.com', 'example.com');   // true
 * isDomainOrSubdomain('test.sub.example.com', 'example.com'); // false
 *
 * @throws {TypeError} - If either destination or original is not a valid URL or string.
 */
export const isDomainOrSubdomain = (destination, original) => {
	const orig = new URL(original).hostname;
	const dest = new URL(destination).hostname;

	return orig === dest || orig.endsWith(`.${dest}`);
};

/**
 * Determines if two URLs have the same protocol.
 *
 * This function checks whether the protocols of two provided URLs are identical.
 * It assumes both URLs are already in canonical form.
 *
 * @param {string|URL} original - The first URL to compare, can be a string or a URL object.
 * @param {string|URL} destination - The second URL to compare, can be a string or a URL object.
 * @returns {boolean} - Returns true if both URLs use the same protocol, false otherwise.
 *
 * @example
 * // Example usage:
 * const url1 = new URL('https://example.com');
 * const url2 = 'https://test.com';
 * console.log(isSameProtocol(url1, url2)); // Output: true
 *
 * const url3 = new URL('http://example.com');
 * console.log(isSameProtocol(url1, url3)); // Output: false
 */
export const isSameProtocol = (destination, original) => {
	const orig = new URL(original).protocol;
	const dest = new URL(destination).protocol;

	return orig === dest;
};
