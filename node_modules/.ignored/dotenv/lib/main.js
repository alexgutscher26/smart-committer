const fs = require('fs')
const path = require('path')
const os = require('os')
const crypto = require('crypto')
const packageJson = require('../package.json')

const version = packageJson.version

const LINE = /(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg

// Parse src into an Object
/**
 * Parses a source string into an object based on a regular expression pattern.
 *
 * @param {string} src - The source string to be parsed.
 * @returns {Object} - An object containing key-value pairs extracted from the source string.
 * @throws {Error} - Throws an error if the input is not a valid string.
 */
function parse (src) {
  const obj = {}

  // Convert buffer to string
  let lines = src.toString()

  // Convert line breaks to same format
  lines = lines.replace(/\r\n?/mg, '\n')

  let match
  while ((match = LINE.exec(lines)) != null) {
    const key = match[1]

    // Default undefined or null to empty string
    let value = (match[2] || '')

    // Remove whitespace
    value = value.trim()

    // Check if double quoted
    const maybeQuote = value[0]

    // Remove surrounding quotes
    value = value.replace(/^(['"`])([\s\S]*)\1$/mg, '$2')

    // Expand newlines if double quoted
    if (maybeQuote === '"') {
      value = value.replace(/\\n/g, '\n')
      value = value.replace(/\\r/g, '\r')
    }

    // Add to object
    obj[key] = value
  }

  return obj
}

/**
 * Parses a vault configuration to retrieve and decrypt environment variables.
 *
 * @param {Object} options - The options object containing the vault path and decryption keys.
 * @returns {Object} - An object containing the parsed environment variables.
 * @throws {Error} - Throws an error if the vault cannot be parsed or if no valid key is found for decryption.
 *
 * @example
 * const options = {
 *   vaultPath: '/path/to/.env.vault',
 *   dotenvKey: 'dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=prod'
 * };
 * const envVars = _parseVault(options);
 */
function _parseVault (options) {
  const vaultPath = _vaultPath(options)

  // Parse .env.vault
  const result = DotenvModule.configDotenv({ path: vaultPath })
  if (!result.parsed) {
    const err = new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`)
    err.code = 'MISSING_DATA'
    throw err
  }

  // handle scenario for comma separated keys - for use with key rotation
  // example: DOTENV_KEY="dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=prod,dotenv://:key_7890@dotenvx.com/vault/.env.vault?environment=prod"
  const keys = _dotenvKey(options).split(',')
  const length = keys.length

  let decrypted
  for (let i = 0; i < length; i++) {
    try {
      // Get full key
      const key = keys[i].trim()

      // Get instructions for decrypt
      const attrs = _instructions(result, key)

      // Decrypt
      decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key)

      break
    } catch (error) {
      // last key
      if (i + 1 >= length) {
        throw error
      }
      // try next key
    }
  }

  // Parse decrypted .env string
  return DotenvModule.parse(decrypted)
}

/**
 * Logs a warning message to the console with version information.
 *
 * @param {string} message - The warning message to log.
 */
function _warn (message) {
  console.log(`[dotenv@${version}][WARN] ${message}`)
}

/**
 * Logs a debug message to the console with the version of the dotenv package.
 *
 * @param {string} message - The debug message to log.
 */
function _debug (message) {
  console.log(`[dotenv@${version}][DEBUG] ${message}`)
}

/**
 * Retrieves the DOTENV_KEY from provided options or environment variables.
 *
 * @param {Object} [options] - An object containing optional configuration settings.
 * @param {string} [options.DOTENV_KEY] - The DOTENV_KEY value directly set in the options.
 * @returns {string} The DOTENV_KEY value, which could be empty if not provided.
 *
 * This function first checks if a DOTENV_KEY is provided in the options object. If it is,
 * and its length is greater than 0, that value is returned. If no valid DOTENV_KEY is found
 * in the options, the function then checks for an environment variable named DOTENV_KEY.
 * If such an environment variable exists and its length is greater than 0, its value is returned.
 * If neither of these conditions are met, the function returns an empty string as the fallback.
 */
function _dotenvKey (options) {
  // prioritize developer directly setting options.DOTENV_KEY
  if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) {
    return options.DOTENV_KEY
  }

  // secondary infra already contains a DOTENV_KEY environment variable
  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {
    return process.env.DOTENV_KEY
  }

  // fallback to empty string
  return ''
}

/**
 * Parses a DOTENV_KEY URI to extract the decrypt key, environment, and ciphertext payload.
 *
 * @param {Object} result - The result object containing parsed data from a .env.vault file.
 * @param {string} dotenvKey - The URI string representing the DOTENV_KEY.
 * @returns {Object} An object containing the ciphertext and key extracted from the DOTENV_KEY.
 * @throws {Error} If the DOTENV_KEY is invalid or missing required parts, throws an error with a specific code.
 *
 * @example
 * const result = { parsed: { 'DOTENV_VAULT_PRODUCTION': 'ciphertext' } };
 * const dotenvKey = 'dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development';
 * try {
 *   const { ciphertext, key } = _instructions(result, dotenvKey);
 *   console.log(ciphertext); // Output: 'ciphertext'
 *   console.log(key); // Output: 'key_1234'
 * } catch (error) {
 *   console.error(error.message); // Handles errors
 * }
 */
function _instructions (result, dotenvKey) {
  // Parse DOTENV_KEY. Format is a URI
  let uri
  try {
    uri = new URL(dotenvKey)
  } catch (error) {
    if (error.code === 'ERR_INVALID_URL') {
      const err = new Error('INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development')
      err.code = 'INVALID_DOTENV_KEY'
      throw err
    }

    throw error
  }

  // Get decrypt key
  const key = uri.password
  if (!key) {
    const err = new Error('INVALID_DOTENV_KEY: Missing key part')
    err.code = 'INVALID_DOTENV_KEY'
    throw err
  }

  // Get environment
  const environment = uri.searchParams.get('environment')
  if (!environment) {
    const err = new Error('INVALID_DOTENV_KEY: Missing environment part')
    err.code = 'INVALID_DOTENV_KEY'
    throw err
  }

  // Get ciphertext payload
  const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`
  const ciphertext = result.parsed[environmentKey] // DOTENV_VAULT_PRODUCTION
  if (!ciphertext) {
    const err = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`)
    err.code = 'NOT_FOUND_DOTENV_ENVIRONMENT'
    throw err
  }

  return { ciphertext, key }
}

/**
 * Finds the path to a vault file based on the provided options.
 *
 * @param {Object} [options] - An object containing optional parameters.
 * @param {string|string[]} [options.path] - The path or paths to check for the vault file. If not provided, defaults to '.env.vault' in the current working directory.
 * @returns {string|null} The path to the vault file if found; otherwise, null.
 * @throws {Error} If an invalid path is provided and no default vault file can be resolved.
 *
 * Example:
 * const vaultPath = _vaultPath({ path: '/path/to/file' });
 * console.log(vaultPath); // '/path/to/file.vault'
 */
function _vaultPath (options) {
  let possibleVaultPath = null

  if (options && options.path && options.path.length > 0) {
    if (Array.isArray(options.path)) {
      for (const filepath of options.path) {
        if (fs.existsSync(filepath)) {
          possibleVaultPath = filepath.endsWith('.vault') ? filepath : `${filepath}.vault`
        }
      }
    } else {
      possibleVaultPath = options.path.endsWith('.vault') ? options.path : `${options.path}.vault`
    }
  } else {
    possibleVaultPath = path.resolve(process.cwd(), '.env.vault')
  }

  if (fs.existsSync(possibleVaultPath)) {
    return possibleVaultPath
  }

  return null
}

/**
 * Resolves an environment path by expanding the tilde (~) to the user's home directory.
 *
 * @param {string} envPath - The environment path to resolve.
 * @returns {string} - The resolved environment path.
 *
 * Example:
 * _resolveHome('~/.config') // Returns '/home/user/.config'
 */
function _resolveHome (envPath) {
  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath
}

/**
 * Configures the vault by loading environment variables from an encrypted .env.vault file and populating them into the process.env object.
 *
 * @param {Object} options - The configuration options for the vault.
 * @param {boolean} [options.debug=false] - Whether to enable debug mode. If true, it logs a message indicating that it is loading env from encrypted .env.vault.
 * @param {string|Object|null} [options.processEnv=process.env] - The environment object to use for populating the vault. Defaults to the current process.env.
 * @returns {Object} An object containing the parsed environment variables.
 * @throws {Error} If an error occurs during the parsing or population of the environment variables.
 *
 * @example
 * const options = {
 *   debug: true,
 *   processEnv: {}
 * };
 * const result = _configVault(options);
 * console.log(result.parsed); // Output will depend on the contents of .env.vault
 */
function _configVault (options) {
  const debug = Boolean(options && options.debug)
  if (debug) {
    _debug('Loading env from encrypted .env.vault')
  }

  const parsed = DotenvModule._parseVault(options)

  let processEnv = process.env
  if (options && options.processEnv != null) {
    processEnv = options.processEnv
  }

  DotenvModule.populate(processEnv, parsed, options)

  return { parsed }
}

/**
 * Loads environment variables from .env files into process.env.
 *
 * @param {Object} [options] - Optional configuration options.
 * @param {boolean} [options.debug=false] - Enables debug mode to log details.
 * @param {string|string[]} [options.encoding='utf8'] - Encoding for reading the .env file.
 * @param {string|string[]} [options.path='.env'] - Path to the .env file(s).
 * @param {Object} [options.processEnv=process.env] - Object to populate with environment variables.
 * @returns {Object} An object containing the parsed environment variables and any errors encountered.
 * @throws {Error} If a required option is missing or invalid.
 *
 * @example
 * // Default usage
 * const result = configDotenv();
 * console.log(result.parsed);
 *
 * @example
 * // Custom encoding and path
 * const customOptions = {
 *   encoding: 'ascii',
 *   path: './custom.env'
 * };
 * const result = configDotenv(customOptions);
 * console.log(result.parsed);
 */
function configDotenv (options) {
  const dotenvPath = path.resolve(process.cwd(), '.env')
  let encoding = 'utf8'
  const debug = Boolean(options && options.debug)

  if (options && options.encoding) {
    encoding = options.encoding
  } else {
    if (debug) {
      _debug('No encoding is specified. UTF-8 is used by default')
    }
  }

  let optionPaths = [dotenvPath] // default, look for .env
  if (options && options.path) {
    if (!Array.isArray(options.path)) {
      optionPaths = [_resolveHome(options.path)]
    } else {
      optionPaths = [] // reset default
      for (const filepath of options.path) {
        optionPaths.push(_resolveHome(filepath))
      }
    }
  }

  // Build the parsed data in a temporary object (because we need to return it).  Once we have the final
  // parsed data, we will combine it with process.env (or options.processEnv if provided).
  let lastError
  const parsedAll = {}
  for (const path of optionPaths) {
    try {
      // Specifying an encoding returns a string instead of a buffer
      const parsed = DotenvModule.parse(fs.readFileSync(path, { encoding }))

      DotenvModule.populate(parsedAll, parsed, options)
    } catch (e) {
      if (debug) {
        _debug(`Failed to load ${path} ${e.message}`)
      }
      lastError = e
    }
  }

  let processEnv = process.env
  if (options && options.processEnv != null) {
    processEnv = options.processEnv
  }

  DotenvModule.populate(processEnv, parsedAll, options)

  if (lastError) {
    return { parsed: parsedAll, error: lastError }
  } else {
    return { parsed: parsedAll }
  }
}

// Populates process.env from .env file
/**
 * Configures the dotenv module with options. If DOTENV_KEY is not set,
 * it falls back to using the original dotenv configuration.
 *
 * @param {Object} options - The configuration options for the dotenv module.
 * @return {Promise<void>} A promise that resolves when the configuration is complete.
 */
function config (options) {
  // fallback to original dotenv if DOTENV_KEY is not set
  if (_dotenvKey(options).length === 0) {
    return DotenvModule.configDotenv(options)
  }

  const vaultPath = _vaultPath(options)

  // dotenvKey exists but .env.vault file does not exist
  if (!vaultPath) {
    _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`)

    return DotenvModule.configDotenv(options)
  }

  return DotenvModule._configVault(options)
}

/**
 * Decrypts an encrypted string using AES-256-GCM algorithm.
 *
 * @param {string} encrypted - The base64 encoded encrypted string to be decrypted.
 * @param {string} keyStr - A string that represents the encryption key. It must be at least 64 characters long.
 * @returns {string} The decrypted plaintext.
 * @throws {Error} Throws an error if the decryption fails due to invalid key length or unsupported state.
 */
function decrypt (encrypted, keyStr) {
  const key = Buffer.from(keyStr.slice(-64), 'hex')
  let ciphertext = Buffer.from(encrypted, 'base64')

  const nonce = ciphertext.subarray(0, 12)
  const authTag = ciphertext.subarray(-16)
  ciphertext = ciphertext.subarray(12, -16)

  try {
    const aesgcm = crypto.createDecipheriv('aes-256-gcm', key, nonce)
    aesgcm.setAuthTag(authTag)
    return `${aesgcm.update(ciphertext)}${aesgcm.final()}`
  } catch (error) {
    const isRange = error instanceof RangeError
    const invalidKeyLength = error.message === 'Invalid key length'
    const decryptionFailed = error.message === 'Unsupported state or unable to authenticate data'

    if (isRange || invalidKeyLength) {
      const err = new Error('INVALID_DOTENV_KEY: It must be 64 characters long (or more)')
      err.code = 'INVALID_DOTENV_KEY'
      throw err
    } else if (decryptionFailed) {
      const err = new Error('DECRYPTION_FAILED: Please check your DOTENV_KEY')
      err.code = 'DECRYPTION_FAILED'
      throw err
    } else {
      throw error
    }
  }
}

// Populate process.env with parsed values
/**
 * Populates the process environment with values from a parsed object.
 *
 * @param {Object} processEnv - The current process environment to be populated.
 * @param {Object} parsed - The object containing key-value pairs to be added or updated in the process environment.
 * @param {Object} [options] - Optional configuration options for the population process.
 * @param {boolean} [options.debug=false] - If true, logs debug information about the population process.
 * @param {boolean} [options.override=false] - If true, overrides existing keys in the process environment with values from the parsed object.
 * @throws {Error} Throws an error if `parsed` is not an object.
 */
function populate (processEnv, parsed, options = {}) {
  const debug = Boolean(options && options.debug)
  const override = Boolean(options && options.override)

  if (typeof parsed !== 'object') {
    const err = new Error('OBJECT_REQUIRED: Please check the processEnv argument being passed to populate')
    err.code = 'OBJECT_REQUIRED'
    throw err
  }

  // Set process.env
  for (const key of Object.keys(parsed)) {
    if (Object.prototype.hasOwnProperty.call(processEnv, key)) {
      if (override === true) {
        processEnv[key] = parsed[key]
      }

      if (debug) {
        if (override === true) {
          _debug(`"${key}" is already defined and WAS overwritten`)
        } else {
          _debug(`"${key}" is already defined and was NOT overwritten`)
        }
      }
    } else {
      processEnv[key] = parsed[key]
    }
  }
}

const DotenvModule = {
  configDotenv,
  _configVault,
  _parseVault,
  config,
  decrypt,
  parse,
  populate
}

module.exports.configDotenv = DotenvModule.configDotenv
module.exports._configVault = DotenvModule._configVault
module.exports._parseVault = DotenvModule._parseVault
module.exports.config = DotenvModule.config
module.exports.decrypt = DotenvModule.decrypt
module.exports.parse = DotenvModule.parse
module.exports.populate = DotenvModule.populate

module.exports = DotenvModule
