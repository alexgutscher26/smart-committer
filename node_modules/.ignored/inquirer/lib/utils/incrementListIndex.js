/**
 * Increments or decrements the index of an item in a list based on the given direction and options.
 *
 * @param {number} current - The current index of the item.
 * @param {'up' | 'down'} dir - The direction to move the index. Can be either 'up' or 'down'.
 * @param {Object} opt - Optional parameters object containing configuration settings.
 * @param {boolean} [opt.loop=true] - Whether to loop back to the start/end of the list when reaching the end/start. Defaults to true.
 * @param {Object} opt.choices - An object containing choice-related properties.
 * @param {number} opt.choices.realLength - The actual length of the choices array, used for calculating index bounds.
 * @returns {number} - The new index after applying the direction and looping if necessary.
 * @throws {Error} - Throws an error if the direction is not 'up' or 'down'.
 *
 * @example
 * const newIndex = incrementListIndex(0, 'down', { choices: { realLength: 5 }, loop: true });
 * console.log(newIndex); // Outputs: 1
 */
export default function incrementListIndex(current, dir, opt) {
  const len = opt.choices.realLength;
  const shouldLoop = 'loop' in opt ? Boolean(opt.loop) : true;
  if (dir === 'up') {
    if (current > 0) {
      return current - 1;
    }
    return shouldLoop ? len - 1 : current;
  }
  if (dir === 'down') {
    if (current < len - 1) {
      return current + 1;
    }
    return shouldLoop ? 0 : current;
  }
  throw new Error('dir must be up or down');
}
