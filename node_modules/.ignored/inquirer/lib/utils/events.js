import { fromEvent, filter, map, share, takeUntil } from 'rxjs';

/**
 * Normalizes keypress events by wrapping them in an object with the provided value.
 *
 * @param {any} value - The value to be wrapped and returned within the object.
 * @param {Object} [key={}] - An optional key object. Defaults to an empty object if not provided.
 * @returns {Object} An object containing the normalized value and key.
 * @example
 * normalizeKeypressEvents('a');
 * // returns { value: 'a', key: {} }
 *
 * normalizeKeypressEvents(123, { code: 'KeyA' });
 * // returns { value: 123, key: { code: 'KeyA' } }
 */
function normalizeKeypressEvents(value, key) {
  return { value, key: key || {} };
}

/**
 * Observes events from a readline instance and emits normalized keypress events.
 *
 * @param {object} rl - The readline interface to observe.
 * @returns {object} - An object containing observables for various keypress types.
 * @throws {Error} - Throws an error if the input is not a valid readline instance.
 */
export default function observe(rl) {
  const keypress = fromEvent(rl.input, 'keypress', normalizeKeypressEvents)
    .pipe(takeUntil(fromEvent(rl, 'close')))
    // Ignore `enter` key. On the readline, we only care about the `line` event.
    .pipe(filter(({ key }) => key.name !== 'enter' && key.name !== 'return'));

  return {
    line: fromEvent(rl, 'line'),
    keypress,

    normalizedUpKey: keypress.pipe(
      filter(
        ({ key }) =>
          key.name === 'up' || key.name === 'k' || (key.name === 'p' && key.ctrl),
      ),
      share(),
    ),

    normalizedDownKey: keypress.pipe(
      filter(
        ({ key }) =>
          key.name === 'down' || key.name === 'j' || (key.name === 'n' && key.ctrl),
      ),
      share(),
    ),

    numberKey: keypress.pipe(
      filter((e) => e.value && '123456789'.includes(e.value)),
      map((e) => Number(e.value)),
      share(),
    ),

    spaceKey: keypress.pipe(
      filter(({ key }) => key && key.name === 'space'),
      share(),
    ),
    aKey: keypress.pipe(
      filter(({ key }) => key && key.name === 'a'),
      share(),
    ),
    iKey: keypress.pipe(
      filter(({ key }) => key && key.name === 'i'),
      share(),
    ),
  };
}
