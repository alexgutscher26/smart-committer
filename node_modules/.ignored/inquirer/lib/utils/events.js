import { fromEvent, filter, map, share, takeUntil } from 'rxjs';

/**
 * Normalizes keypress events by creating an object containing the input value and key details.
 *
 * @param {string} value - The value of the keypress event.
 * @param {Object} [key={}] - The key details associated with the event. Defaults to an empty object if not provided.
 * @returns {Object} An object with properties 'value' and 'key'.
 *
 * @example
 * const normalizedEvent = normalizeKeypressEvents('A', { shift: true });
 * console.log(normalizedEvent); // Output: { value: 'A', key: { shift: true } }
 */
function normalizeKeypressEvents(value, key) {
  return { value, key: key || {} };
}

/**
 * Observes user input events from a readline interface.
 *
 * @param {Object} rl - The readline interface object.
 * @returns {Object} An object containing observable streams for different keypress events.
 */
export default function observe(rl) {
  const keypress = fromEvent(rl.input, 'keypress', normalizeKeypressEvents)
    .pipe(takeUntil(fromEvent(rl, 'close')))
    // Ignore `enter` key. On the readline, we only care about the `line` event.
    .pipe(filter(({ key }) => key.name !== 'enter' && key.name !== 'return'));

  return {
    line: fromEvent(rl, 'line'),
    keypress,

    normalizedUpKey: keypress.pipe(
      filter(
        ({ key }) =>
          key.name === 'up' || key.name === 'k' || (key.name === 'p' && key.ctrl),
      ),
      share(),
    ),

    normalizedDownKey: keypress.pipe(
      filter(
        ({ key }) =>
          key.name === 'down' || key.name === 'j' || (key.name === 'n' && key.ctrl),
      ),
      share(),
    ),

    numberKey: keypress.pipe(
      filter((e) => e.value && '123456789'.includes(e.value)),
      map((e) => Number(e.value)),
      share(),
    ),

    spaceKey: keypress.pipe(
      filter(({ key }) => key && key.name === 'space'),
      share(),
    ),
    aKey: keypress.pipe(
      filter(({ key }) => key && key.name === 'a'),
      share(),
    ),
    iKey: keypress.pipe(
      filter(({ key }) => key && key.name === 'i'),
      share(),
    ),
  };
}
