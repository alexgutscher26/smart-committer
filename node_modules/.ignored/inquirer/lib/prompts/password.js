/**
 * `password` type prompt
 */

import colors from 'yoctocolors-cjs';
import { map, takeUntil } from 'rxjs';
import observe from '../utils/events.js';
import Base from './base.js';

function mask(input, maskChar) {
  input = String(input);
  maskChar = typeof maskChar === 'string' ? maskChar : '*';
  if (input.length === 0) {
    return '';
  }

  return Array.from({ length: input.length + 1 }).join(maskChar);
}

export default class PasswordPrompt extends Base {
  /**
   * Start the Inquiry session
   * @param  {Function} cb      Callback when prompt is done
   * @return {this}
   */

  _run(cb) {
    this.done = cb;

    const events = observe(this.rl);

    // Once user confirm (enter key)
    const submit = events.line.pipe(map(this.filterInput.bind(this)));

    const validation = this.handleSubmitEvents(submit);
    validation.success.forEach(this.onEnd.bind(this));
    validation.error.forEach(this.onError.bind(this));

    events.keypress
      .pipe(takeUntil(validation.success))
      .forEach(this.onKeypress.bind(this));

    // Init
    this.render();

    return this;
  }


  /**
   * Render the prompt to screen.
   *
   * @param {string} [error] - Optional error message to display below the prompt.
   * @returns {PasswordPrompt} This instance for method chaining.
   */
  render(error) {
    let message = this.getQuestion();
    let bottomContent = '';

    message +=
      this.status === 'answered'
        ? this.getMaskedValue(this.answer)
        : this.getMaskedValue(this.rl.line || '');

    if (error) {
      bottomContent = '\n' + colors.red('>> ') + error;
    }

    this.screen.render(message, bottomContent);
  }

  /**
   * Masks a value based on the current status and options.
   *
   * @param {string} value - The value to be masked.
   * @return {string} - The masked or hidden value.
   *
   * @throws {Error} - If an unexpected error occurs during masking.
   */
  getMaskedValue(value) {
    if (this.status === 'answered') {
      return this.opt.mask
        ? colors.cyan(mask(value, this.opt.mask))
        : colors.italic(colors.dim('[hidden]'));
    }
    return this.opt.mask
      ? mask(value, this.opt.mask)
      : colors.italic(colors.dim('[input is hidden] '));
  }

  /**
   * Returns a masked value during an asynchronous filter/validation process.
   *
   * @param {string} value - The input value to be masked.
   * @return {string} The masked value.
   */
  getSpinningValue(value) {
    return this.getMaskedValue(value);
  }


  /**
   * Filters input when the user presses the `enter` key.
   *
   * @param {string} input - The input string to be filtered.
   * @returns {string} - The filtered input or a default value if input is falsy.
   * @throws {Error} - If an error occurs during filtering, an exception will be thrown.
   */
  filterInput(input) {
    if (!input) {
      return this.opt.default == null ? '' : this.opt.default;
    }

    return input;
  }

  /**
   * Handles the end of the interaction process.
   *
   * This method is called when the interaction with the user has ended, typically after receiving a response.
   * It updates the status to 'answered', stores the answer from the provided state, and re-renders the prompt.
   * Finally, it marks the screen as done and resolves the interaction with the stored answer.
   *
   * @param {Object} state - The current state of the interaction containing the user's response.
   * @returns {void}
   *
   * @throws {Error} If an error occurs during the processing of the state or rendering.
   */
  onEnd(state) {
    this.status = 'answered';
    this.answer = state.value;

    // Re-render prompt
    this.render();

    this.screen.done();
    this.done(state.value);
  }

  /**
   * Handles error state by rendering validity.
   *
   * @param {Object} state - The current state object containing validation information.
   * @param {boolean} state.isValid - Indicates whether the state is valid or not.
   */
  onError(state) {
    this.render(state.isValid);
  }

  /**
   * Handles the keypress event by clearing the default value if it exists and then re-renders the component.
   *
   * @method onKeypress
   * @return {void} This method does not return any value.
   */
  onKeypress() {
    // If user press a key, just clear the default value
    this.opt.default &&= undefined;

    this.render();
  }
}
