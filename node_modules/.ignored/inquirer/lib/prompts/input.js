/**
 * `input` type prompt
 */

import colors from 'yoctocolors-cjs';
import { map, takeUntil } from 'rxjs';
import observe from '../utils/events.js';
import Base from './base.js';

export default class InputPrompt extends Base {

  /**
   * Start the Inquiry session
   *
   * @param {Function} cb - Callback function to call when the prompt is completed.
   * @return {this}
   */
  _run(cb) {
    this.done = cb;

    // Once user confirm (enter key)
    const events = observe(this.rl);
    const submit = events.line.pipe(map(this.filterInput.bind(this)));

    const validation = this.handleSubmitEvents(submit);
    validation.success.forEach(this.onEnd.bind(this));
    validation.error.forEach(this.onError.bind(this));

    events.keypress
      .pipe(takeUntil(validation.success))
      .forEach(this.onKeypress.bind(this));

    // Init
    this.render();

    return this;
  }


  /**
   * Render the prompt to screen
   *
   * @param {string} [error] - An optional error message to display.
   * @return {InputPrompt} self
   */
  render(error) {
    let bottomContent = '';
    let appendContent = '';
    let message = this.getQuestion();
    const { transformer } = this.opt;
    const isFinal = this.status === 'answered';

    appendContent = isFinal ? this.answer : this.rl.line;

    if (transformer) {
      message += transformer(appendContent, this.answers, { isFinal });
    } else {
      message += isFinal ? colors.cyan(appendContent) : appendContent;
    }

    if (error) {
      bottomContent = colors.red('>> ') + error;
    }

    this.screen.render(message, bottomContent);
  }


  /**
   * Filters the input value based on certain conditions.
   *
   * @param {string} input - The input value to be filtered.
   * @returns {string} - The filtered input value.
   *
   * @example
   * // Example usage of filterInput
   * const result = filterInput('Hello');
   * console.log(result); // Output: 'Hello'
   *
   * @throws {Error} - If the input is not a string.
   */
  filterInput(input) {
    if (!input) {
      return this.opt.default == null ? '' : this.opt.default;
    }

    return input;
  }

  /**
   * Handles the end of the language processing by setting the answer and status,
   * re-rendering the prompt, and completing the screen.
   *
   * @param {Object} state - The current state object containing the value.
   * @returns {void}
   */
  onEnd(state) {
    this.answer = state.value;
    this.status = 'answered';

    // Re-render prompt
    this.render();

    this.screen.done();
    this.done(state.value);
  }

  /**
   * Handles errors by appending error value to the current line and updating cursor position.
   *
   * @param {Object} options - The options object containing error information.
   * @param {string} options.value - The error message or value to append.
   * @param {boolean} options.isValid - Indicates if the input is valid after the error.
   */
  onError({ value = '', isValid }) {
    this.rl.line += value;
    this.rl.cursor += value.length;
    this.render(isValid);
  }


  /**
   * Handles the keypress event when a user presses a key.
   *
   * This method updates the status to 'touched' and then calls the render method
   * to update the display accordingly.
   *
   * @returns {void}
   */
  onKeypress() {
    this.status = 'touched';

    this.render();
  }
}
