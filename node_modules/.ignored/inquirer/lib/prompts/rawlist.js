/**
 * `rawlist` type prompt
 */

import colors from 'yoctocolors-cjs';
import { map, takeUntil } from 'rxjs';
import Separator from '../objects/separator.js';
import observe from '../utils/events.js';
import Paginator from '../utils/paginator.js';
import incrementListIndex from '../utils/incrementListIndex.js';
import Base from './base.js';

export default class RawListPrompt extends Base {
  constructor(questions, rl, answers) {
    super(questions, rl, answers);

    this.hiddenLine = '';
    this.lastKey = '';

    if (!this.opt.choices) {
      this.throwParamError('choices');
    }

    this.opt.validChoices = this.opt.choices.filter(Separator.exclude);

    this.selected = 0;
    this.rawDefault = 0;

    Object.assign(this.opt, {
      validate(val) {
        return val != null;
      },
    });

    const def = this.opt.default;
    if (typeof def === 'number' && def >= 0 && def < this.opt.choices.realLength) {
      this.selected = def;
      this.rawDefault = def;
    } else if (typeof def !== 'number' && def != null) {
      const index = this.opt.choices.realChoices.findIndex(({ value }) => value === def);
      const safeIndex = Math.max(index, 0);
      this.selected = safeIndex;
      this.rawDefault = safeIndex;
    }

    // Make sure no default is set (so it won't be printed)
    this.opt.default = null;

    const shouldLoop = this.opt.loop === undefined ? true : this.opt.loop;
    this.paginator = new Paginator(undefined, { isInfinite: shouldLoop });
  }

  /**
  _run(cb) {
    /**
     * Start the Inquiry session.
     *
     * @param {Function} cb - Callback function to be executed when the prompt is done.
     * @returns {this}
     */
    this.done = cb;

    // Once user confirm (enter key)
    const events = observe(this.rl);
    const submit = events.line.pipe(map(this.getCurrentValue.bind(this)));

    const validation = this.handleSubmitEvents(submit);
    validation.success.forEach(this.onEnd.bind(this));
    validation.error.forEach(this.onError.bind(this));

    events.normalizedUpKey
      .pipe(takeUntil(validation.success))
      .forEach(this.onUpKey.bind(this));
    events.normalizedDownKey
      .pipe(takeUntil(validation.success))
      .forEach(this.onDownKey.bind(this));
    events.keypress
      .pipe(takeUntil(validation.success))
      .forEach(this.onKeypress.bind(this));
    // Init the prompt
    this.render();

    return this;
  }

  /**
  render(error) {
    /**
     * Render the prompt to screen.
     *
     * @param {string} [error] - An optional error message to display below the question.
     * @returns {RawListPrompt} self - The current instance of the prompt.
     */
    // Render question
    let message = this.getQuestion();
    let bottomContent = '';

    if (this.status === 'answered') {
      message += colors.cyan(this.opt.choices.getChoice(this.selected).short);
    } else {
      const choicesStr = renderChoices(this.opt.choices, this.selected);
      message +=
        '\n' + this.paginator.paginate(choicesStr, this.selected, this.opt.pageSize);
      message += '\n  Answer: ';
    }
    message += this.rl.line;

    if (error) {
      bottomContent = '\n' + colors.red('>> ') + error;
    }

    this.screen.render(message, bottomContent);
  }

  /**
  getCurrentValue(index) {
    /**
     * Gets the current value based on the provided index.
     *
     * @param {number|string} [index] - The index of the choice to retrieve. If null, it uses the default index.
     * @returns {(string|null)} The value of the selected choice or null if no choice is found.
     */
    if (index == null) {
      index = this.rawDefault;
    } else if (index === '') {
      this.selected = this.selected === undefined ? -1 : this.selected;
      index = this.selected;
    } else {
      index -= 1;
    }

    const choice = this.opt.choices.getChoice(index);
    return choice ? choice.value : null;
  }

  onEnd(state) {
    /**
     * Called when the language model has finished generating text.
     *
     * @param {Object} state - The current state of the language model.
     * @returns {void}
     *
     * This method sets the status to 'answered', stores the answer from the state, and re-renders the prompt.
     * It then marks the screen as done and completes with the value from the state.
     */
    this.status = 'answered';
    this.answer = state.value;

    // Re-render prompt
    this.render();

    this.screen.done();
    this.done(state.value);
  }

  onError() {
    /**
     * Handles an error by rendering an error message to the user.
     *
     * This method is called when a validation error occurs, typically because an invalid index was provided.
     * It renders a simple error message "Please enter a valid index" using the `render` method.
     *
     * @function
     * @name onError
     */
    this.render('Please enter a valid index');
  }

  /**
  onKeypress() {
    /**
     * Handles the keypress event.
     *
     * This method is called when a key is pressed. It determines the index based on the last key pressed ('arrow' or other).
     * If 'arrow' was the last key, it uses the length of `hiddenLine` to calculate the index; otherwise, it uses the length of `rl.line`.
     * The selected choice is updated based on this index, and the rendering method is called to update the display.
     *
     * @returns {void}
     */
    let index;

    if (this.lastKey === 'arrow') {
      index = this.hiddenLine.length > 0 ? Number(this.hiddenLine) - 1 : 0;
    } else {
      index = this.rl.line.length > 0 ? Number(this.rl.line) - 1 : 0;
    }
    this.lastKey = '';

    this.selected = this.opt.choices.getChoice(index) ? index : undefined;
    this.render();
  }

  /**
  onUpKey() {
    /**
     * Handles the up arrow key press event.
     *
     * This method is called when the user presses the up arrow key. It triggers the
     * `onArrowKey` method with the argument 'up'.
     */
    this.onArrowKey('up');
  }

  /**
  onDownKey() {
    /**
     * Handles the down key press event.
     *
     * @function onDownKey
     * @description This method is called when the user presses the down arrow key. It triggers the `onArrowKey` method with the argument 'down'.
     */
    this.onArrowKey('down');
  }

  /**
  onArrowKey(type) {
    /**
     * Handles arrow key press events to navigate through a list or similar interface.
     *
     * @param {String} type - The direction of the arrow key pressed. Can be either 'up' or 'down'.
     */
    this.selected = incrementListIndex(this.selected, type, this.opt) || 0;
    this.hiddenLine = String(this.selected + 1);
    this.rl.line = '';
    this.lastKey = 'arrow';
  }
}


/**
 * Function for rendering list choices.
 *
 * @param {Number} pointer - Position of the pointer indicating the currently selected choice.
 * @return {String} - Rendered content as a string, with each choice on a new line and the selected choice highlighted in cyan.
 */
function renderChoices(choices, pointer) {
  let output = '';
  let separatorOffset = 0;

  choices.forEach((choice, i) => {
    output += output ? '\n  ' : '  ';

    if (choice.type === 'separator') {
      separatorOffset++;
      output += ' ' + choice;
      return;
    }

    const index = i - separatorOffset;
    let display = index + 1 + ') ' + choice.name;
    if (index === pointer) {
      display = colors.cyan(display);
    }

    output += display;
  });

  return output;
}
