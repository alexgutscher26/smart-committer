/**
 * `list` type prompt
 */

import ansiEscapes from 'ansi-escapes';
import colors from 'yoctocolors-cjs';
import figures from '@inquirer/figures';
import runAsync from 'run-async';
import { flatMap, map, take, takeUntil } from 'rxjs';
import observe from '../utils/events.js';
import Paginator from '../utils/paginator.js';
import incrementListIndex from '../utils/incrementListIndex.js';
import Base from './base.js';

export default class ListPrompt extends Base {
  constructor(questions, rl, answers) {
    super(questions, rl, answers);

    if (!this.opt.choices) {
      this.throwParamError('choices');
    }

    this.firstRender = true;
    this.selected = 0;

    const def = this.opt.default;

    // If def is a Number, then use as index. Otherwise, check for value.
    if (typeof def === 'number' && def >= 0 && def < this.opt.choices.realLength) {
      this.selected = def;
    } else if (typeof def !== 'number' && def != null) {
      const index = this.opt.choices.realChoices.findIndex(({ value }) => value === def);
      this.selected = Math.max(index, 0);
    }

    // Make sure no default is set (so it won't be printed)
    this.opt.default = null;

    const shouldLoop = this.opt.loop === undefined ? true : this.opt.loop;
    this.paginator = new Paginator(this.screen, { isInfinite: shouldLoop });
  }

  /**
   * Start the Inquiry session
   * @param  {Function} cb      Callback when prompt is done
   * @return {this}
   */

  _run(cb) {
    this.done = cb;

    const events = observe(this.rl);
    events.normalizedUpKey.pipe(takeUntil(events.line)).forEach(this.onUpKey.bind(this));
    events.normalizedDownKey
      .pipe(takeUntil(events.line))
        map(this.getCurrentValue.bind(this)),
        /**
         * Start the Inquiry session.
         *
         * @param {Function} cb - Callback function to be executed when the prompt is done.
         * @return {this}
         */
        flatMap((value) =>
          runAsync(this.opt.filter)(value, this.answers).catch((error) => error),
        ),
      )
      .forEach(this.onSubmit.bind(this));

    // Init the prompt
    this.render();

    return this;
  }

  /**
   * Render the prompt to screen
   * @return {ListPrompt} self
   */

  render() {
    // Render question
    let message = this.getQuestion();

    if (this.firstRender) {
      message += colors.dim('(Use arrow keys)');
    }

      const choicesStr = listRender(this.opt.choices, this.selected);
      /**
       * Render the prompt to screen.
       *
       * @return {ListPrompt} - The current instance of ListPrompt for method chaining.
       */
      const indexPosition = this.opt.choices.indexOf(
        this.opt.choices.getChoice(this.selected),
      );
      const realIndexPosition =
        this.opt.choices.reduce((acc, value, i) => {
          // Dont count lines past the choice we are looking at
          if (i > indexPosition) {
            return acc;
          }
          // Add line if it's a separator
          if (value.type === 'separator') {
            return acc + 1;
          }

          let l = value.name;
          // Non-strings take up one line
          if (typeof l !== 'string') {
            return acc + 1;
          }

          // Calculate lines taken up by string
          l = l.split('\n');
          return acc + l.length;
        }, 0) - 1;
      message +=
        '\n' + this.paginator.paginate(choicesStr, realIndexPosition, this.opt.pageSize);
    }

    message += ansiEscapes.cursorHide;
    this.firstRender = false;

    this.screen.render(message);
  }

  /**
   * When user press `enter` key
   */

  onSubmit(value) {
    this.status = 'answered';

    // Rerender prompt
    this.render();

    this.screen.done();
    this.done(value);
  }
  }
/**
 * Handles the submission of a value when the user presses the 'enter' key.
 *
 * @param {string} value - The value submitted by the user.
 * @returns {void}
 *
 * Example usage:
 * myObject.onSubmit('user input');
 */

  /**
   * When user press a key
   */
  onUpKey() {
    this.selected = incrementListIndex(this.selected, 'up', this.opt);
    this.render();
  }

  onDownKey() {
    /**
     * Retrieves the current value from the selected choice in the options.
     *
     * @returns {any} - The value of the currently selected choice.
     *
     * @throws {Error} - Throws an error if no choices are available or the selected index is out of bounds.
     *
     * Example usage:
     * const currentValue = myObject.getCurrentValue();
     */
    this.selected = incrementListIndex(this.selected, 'down', this.opt);
    this.render();
  }

    /**
     * Handles the action when the user presses the up key.
     *
     * This method updates the selected item in a list by incrementing its index
     * in the 'up' direction according to the provided options. After updating,
     * it triggers the rendering of the list to reflect the changes.
     *
     * @param {Object} this - The context object containing the method.
     * @param {Function} incrementListIndex - A function that calculates the new index
     *                                      based on the current index, direction ('up' or 'down'),
     *                                      and options.
     * @param {number} this.selected - The current selected index in the list.
     * @param {string} 'up' - The direction of incrementing the index.
     * @param {Object} this.opt - Options that may affect how the index is incremented.
     * @returns {void}
     */
    }

    this.render();
  }
}
/**
 * Handles the down key event by moving the selection to the next item in the list.
 *
 * @function
 * @name onDownKey
 */

/**
 * Function for rendering list choices.
 *
 * @param {Array} choices - An array of choice objects. Each choice can be either an option or a separator.
 /**
  * Handles the number key input by updating the selected index based on the input value and rendering the updated state.
  *
  * @param {number} input - The number key pressed, representing a selection index (1-based).
  */
 * @param {Number} pointer - The current position of the pointer in the choices list.
 * @returns {String} - A string representing the rendered content of the list choices.
 *
 * @example
 * const choices = [
 *   { name: 'Option 1' },
 *   { type: 'separator', separator: true },
 *   { name: 'Option 2', disabled: 'This option is unavailable' }
 * ];
 * const pointer = 0;
 * console.log(listRender(choices, pointer));
 *
 * @throws Will throw an error if the choices array contains invalid types.
 */
function listRender(choices, pointer) {
  let output = '';
  let separatorOffset = 0;

  choices.forEach((choice, i) => {
    if (choice.type === 'separator') {
      separatorOffset++;
      output += '  ' + choice + '\n';
      return;
    }

    if (choice.disabled) {
      separatorOffset++;
      output += '  - ' + choice.name;
      output += ` (${
        typeof choice.disabled === 'string' ? choice.disabled : 'Disabled'
      })`;
      output += '\n';
      return;
    }

    const isSelected = i - separatorOffset === pointer;
    let line = (isSelected ? figures.pointer + ' ' : '  ') + choice.name;
    if (isSelected) {
      line = colors.cyan(line);
    }

    output += line + ' \n';
  });

  return output.replaceAll(/\n$/g, '');
}
