/**
 * `list` type prompt
 */

import ansiEscapes from 'ansi-escapes';
import colors from 'yoctocolors-cjs';
import figures from '@inquirer/figures';
import { map, takeUntil } from 'rxjs';
import observe from '../utils/events.js';
import Paginator from '../utils/paginator.js';
import incrementListIndex from '../utils/incrementListIndex.js';
import Base from './base.js';

export default class CheckboxPrompt extends Base {
  constructor(questions, rl, answers) {
    super(questions, rl, answers);

    if (!this.opt.choices) {
      this.throwParamError('choices');
    }

    if (Array.isArray(this.opt.default)) {
      for (const choice of this.opt.choices) {
        if (this.opt.default.includes(choice.value)) {
          choice.checked = true;
        }
      }
    }

    this.pointer = 0;

    // Make sure no default is set (so it won't be printed)
    this.opt.default = null;

    const shouldLoop = this.opt.loop === undefined ? true : this.opt.loop;
    this.paginator = new Paginator(this.screen, { isInfinite: shouldLoop });
  }

  /**
   * Start the Inquiry session
   * @param  {Function} cb      Callback when prompt is done
   * @return {this}
   */

  _run(cb) {
    this.done = cb;
    );
    /**
     * Starts the Inquiry session.
     *
     * @param {Function} cb - Callback function to execute when the prompt is completed.
     * @returns {this} - The current instance of the class, allowing for method chaining.
     */
    validation.success.forEach(this.onEnd.bind(this));
    validation.error.forEach(this.onError.bind(this));

    events.normalizedUpKey
      .pipe(takeUntil(validation.success))
      .forEach(this.onUpKey.bind(this));
    events.normalizedDownKey
      .pipe(takeUntil(validation.success))
      .forEach(this.onDownKey.bind(this));
    events.numberKey
      .pipe(takeUntil(validation.success))
      .forEach(this.onNumberKey.bind(this));
    events.spaceKey
      .pipe(takeUntil(validation.success))
      .forEach(this.onSpaceKey.bind(this));
    events.aKey.pipe(takeUntil(validation.success)).forEach(this.onAllKey.bind(this));
    events.iKey.pipe(takeUntil(validation.success)).forEach(this.onInverseKey.bind(this));

    // Init the prompt
    this.render();
    this.firstRender = false;

    return this;
  }

  /**
   * Render the prompt to screen
   * @return {CheckboxPrompt} self
   */

  render(error) {
    // Render question
    let message = this.getQuestion();
        '(Press ' +
        /**
         * Render the prompt to screen.
         *
         * @param {string} error - Optional error message to display at the bottom of the prompt.
         * @return {CheckboxPrompt} self - Returns the current instance for method chaining.
         */
        colors.cyan(colors.bold('<space>')) +
        ' to select, ' +
        colors.cyan(colors.bold('<a>')) +
        ' to toggle all, ' +
        colors.cyan(colors.bold('<i>')) +
        ' to invert selection, and ' +
        colors.cyan(colors.bold('<enter>')) +
        ' to proceed)';
    }

    // Render choices or answer depending on the state
    if (this.status === 'answered') {
      message += colors.cyan(this.selection.join(', '));
    } else {
      const choicesStr = renderChoices(this.opt.choices, this.pointer);
      const indexPosition = this.opt.choices.indexOf(
        this.opt.choices.getChoice(this.pointer),
      );
      const realIndexPosition =
        this.opt.choices.reduce((acc, value, i) => {
          // Dont count lines past the choice we are looking at
          if (i > indexPosition) {
            return acc;
          }
          // Add line if it's a separator
          if (value.type === 'separator') {
            return acc + 1;
          }

          let l = value.name;
          // Non-strings take up one line
          if (typeof l !== 'string') {
            return acc + 1;
          }

          // Calculate lines taken up by string
          l = l.split('\n');
          return acc + l.length;
        }, 0) - 1;
      message +=
        '\n' + this.paginator.paginate(choicesStr, realIndexPosition, this.opt.pageSize);
    }

    if (error) {
      bottomContent = colors.red('>> ') + error;
    }

    message += ansiEscapes.cursorHide;

    this.screen.render(message, bottomContent);
  }

  /**
   * When user press `enter` key
   */

  onEnd(state) {
    this.status = 'answered';
    this.dontShowHints = true;
    // Rerender prompt (and clean subline error)
    this.done(state.value);
  /**
   * Handles the end of an input process when the user presses the `enter` key.
   *
   * @param {Object} state - The current state object containing user input value.
   * @returns {void}
   */
  }

  onError(state) {
    this.render(state.isValid);
  }

  getCurrentValue() {
    const choices = this.opt.choices.filter(
      (choice) => Boolean(choice.checked) && !choice.disabled,
    );
/**
 * Handles error state by rendering validity.
 *
 * @param {object} state - The current state object containing the validity status.
 * @param {boolean} state.isValid - Indicates whether the current state is valid or not.
 */

    this.selection = choices.map((choice) => choice.short);
    return choices.map((choice) => choice.value);
  }
/**
 * Retrieves the current value of selected choices, filtering out disabled or unchecked options.
 *
 * @returns {Array} An array containing the values of the currently selected choices.
 *
 * @example
 * // Assuming instance is an object with a 'opt.choices' property
 * const selectedValues = instance.getCurrentValue();
 * console.log(selectedValues); // Outputs: ['value1', 'value2']
 */

  onUpKey() {
    this.pointer = incrementListIndex(this.pointer, 'up', this.opt);
    this.render();
  }

  onDownKey() {
    this.pointer = incrementListIndex(this.pointer, 'down', this.opt);
    this.render();
  /**
   * Handles the up key press event.
   *
   * Increments the list index to move the pointer upwards and re-renders the component.
   *
   * @param {Object} this - The current context of the object, expected to have properties 'pointer', 'opt', and a method 'render'.
   * @throws {Error} If 'this.opt' is not defined or 'this.render' is not a function.
   */
  }

  onNumberKey(input) {
    if (input <= this.opt.choices.realLength) {
      this.pointer = input - 1;
      /**
       * Handles the down key event by incrementing the pointer index for the current list direction and re-rendering the UI.
       *
       * @method onDownKey
       * @returns {void}
       * @throws {Error} If the current pointer position is out of bounds for the list in 'down' direction.
       */
      this.toggleChoice(this.pointer);
    }

    this.render();
  }
/**
 * Handles the input of a number key.
 *
 * @param {number} input - The number key that was pressed.
 * @throws {Error} Throws an error if the input is not within the valid range.
 */

  onSpaceKey() {
    this.toggleChoice(this.pointer);
    this.render();
  }

  onAllKey() {
    const shouldBeChecked = this.opt.choices.some(
      (choice) => choice.type !== 'separator' && !choice.checked,
    /**
     * Toggles the choice at the current pointer position and re-renders the UI.
     *
     * @function onSpaceKey
     * @memberof SupportedLanguage.JAVASCRIPT code
     * @summary Handles the space key event to toggle a choice.
     * @example
     * // Assuming 'instance' is an instance of the class where onSpaceKey is defined
     * instance.onSpaceKey();
     */
    );

    this.opt.choices.forEach((choice) => {
      if (choice.type !== 'separator') {
        choice.checked = shouldBeChecked;
      /**
       * Toggles the checked state of all choices that are not separators.
       *
       * This method iterates over each choice in the options list. If a choice is not a separator,
       * it sets the `checked` property to be consistent with the current state of any choice
       * that is not a separator and unchecked.
       *
       * @this {Object} - The context object containing the `opt.choices` array and `render` method.
       */
      }
    });

    this.render();
  }

  onInverseKey() {
    this.opt.choices.forEach((choice) => {
      if (choice.type !== 'separator') {
        choice.checked = !choice.checked;
      }
    });

    this.render();
  /**
   * Inverts the selection state of all choices except for separators in this instance's options.
   *
   * @public
   */
  }

  toggleChoice(index) {
    const item = this.opt.choices.getChoice(index);
    if (item !== undefined) {
      this.opt.choices.getChoice(index).checked = !item.checked;
    }
  }
}

/**
 * Toggles the checked state of a choice at a specific index.
 *
 * @param {number} index - The zero-based index of the choice to toggle.
 * @throws {Error} If the provided index is out of bounds.
 */

/**
 * Function for rendering checkbox choices.
 *
 * @param {Array} choices - Array of choice objects to render. Each object can have the following properties:
 *   - type {String}: Type of choice, either 'checkbox' or 'separator'.
 *   - name {String}: Name of the choice.
 *   - checked {Boolean}: Whether the checkbox is checked (only applies if type is 'checkbox').
 *   - disabled {String|Boolean}: Whether the choice is disabled. If a string is provided, it will be used as the reason for disabling. If not provided or false, the choice is not disabled.
 * @param {Number} pointer - Position of the pointer indicating the currently selected item.
 * @return {String} Rendered content of the choices.
 * @throws {Error} If an invalid choice type is encountered.
 */
function renderChoices(choices, pointer) {
  let output = '';
  let separatorOffset = 0;

  choices.forEach((choice, i) => {
    if (choice.type === 'separator') {
      separatorOffset++;
      output += ' ' + choice + '\n';
      return;
    }

    if (choice.disabled) {
      separatorOffset++;
      output += ' - ' + choice.name;
      output += ` (${
        typeof choice.disabled === 'string' ? choice.disabled : 'Disabled'
      })`;
    } else {
      const line = getCheckbox(choice.checked) + ' ' + choice.name;
      output +=
        i - separatorOffset === pointer
          ? colors.cyan(figures.pointer + line)
          : ' ' + line;
    }

    output += '\n';
  });

  return output.replaceAll(/\n$/g, '');
}


/**
 * Get the checkbox string representation based on whether it is checked or not.
 *
 * @param {boolean} checked - Whether the checkbox should be in a checked state (true) or unchecked state (false).
 * @return {string} The composited checkbox string, either green radioOn if checked, or radioOff if not checked.
 */
function getCheckbox(checked) {
  return checked ? colors.green(figures.radioOn) : figures.radioOff;
}
