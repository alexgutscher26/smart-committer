/**
 * `list` type prompt
 */

import ansiEscapes from 'ansi-escapes';
import colors from 'yoctocolors-cjs';
import figures from '@inquirer/figures';
import { map, takeUntil } from 'rxjs';
import observe from '../utils/events.js';
import Paginator from '../utils/paginator.js';
import incrementListIndex from '../utils/incrementListIndex.js';
import Base from './base.js';

export default class CheckboxPrompt extends Base {
  constructor(questions, rl, answers) {
    super(questions, rl, answers);

    if (!this.opt.choices) {
      this.throwParamError('choices');
    }

    if (Array.isArray(this.opt.default)) {
      for (const choice of this.opt.choices) {
        if (this.opt.default.includes(choice.value)) {
          choice.checked = true;
        }
      }
    }

    this.pointer = 0;

    // Make sure no default is set (so it won't be printed)
    this.opt.default = null;

    const shouldLoop = this.opt.loop === undefined ? true : this.opt.loop;
    this.paginator = new Paginator(this.screen, { isInfinite: shouldLoop });
  }

  /**
   * Start the Inquiry session
   * @param  {Function} cb      Callback when prompt is done
   * @return {this}
   */

  _run(cb) {
    this.done = cb;

    const events = observe(this.rl);

    const validation = this.handleSubmitEvents(
      events.line.pipe(map(this.getCurrentValue.bind(this))),
    );
    validation.success.forEach(this.onEnd.bind(this));
    validation.error.forEach(this.onError.bind(this));

    events.normalizedUpKey
      .pipe(takeUntil(validation.success))
      .pipe(takeUntil(validation.success))
      /**
       * Start the Inquiry session.
       * @param {Function} cb - Callback function to be called when the prompt is done.
       * @return {this} - Returns the current instance for method chaining.
       */
      .forEach(this.onNumberKey.bind(this));
    events.spaceKey
      .pipe(takeUntil(validation.success))
      .forEach(this.onSpaceKey.bind(this));
    events.aKey.pipe(takeUntil(validation.success)).forEach(this.onAllKey.bind(this));
    events.iKey.pipe(takeUntil(validation.success)).forEach(this.onInverseKey.bind(this));

    // Init the prompt
    this.render();
    this.firstRender = false;

    return this;
  }

  /**
   * Render the prompt to screen
   * @return {CheckboxPrompt} self
   */

  render(error) {
    // Render question
    let message = this.getQuestion();
    let bottomContent = '';

    if (!this.dontShowHints) {
      message +=
        '(Press ' +
        colors.cyan(colors.bold('<space>')) +
        ' to select, ' +
        colors.cyan(colors.bold('<a>')) +
        ' to toggle all, ' +
        colors.cyan(colors.bold('<i>')) +
        ' to invert selection, and ' +
    // Render choices or answer depending on the state
    /**
     * Renders the prompt to the screen and handles user input.
     * @param {string} [error] - An optional error message to display at the bottom of the prompt.
     * @return {CheckboxPrompt} self
     */
    if (this.status === 'answered') {
      message += colors.cyan(this.selection.join(', '));
    } else {
      const choicesStr = renderChoices(this.opt.choices, this.pointer);
      const indexPosition = this.opt.choices.indexOf(
        this.opt.choices.getChoice(this.pointer),
      );
      const realIndexPosition =
        this.opt.choices.reduce((acc, value, i) => {
          // Dont count lines past the choice we are looking at
          if (i > indexPosition) {
            return acc;
          }
          // Add line if it's a separator
          if (value.type === 'separator') {
            return acc + 1;
          }

          let l = value.name;
          // Non-strings take up one line
          if (typeof l !== 'string') {
            return acc + 1;
          }

          // Calculate lines taken up by string
          l = l.split('\n');
          return acc + l.length;
        }, 0) - 1;
      message +=
        '\n' + this.paginator.paginate(choicesStr, realIndexPosition, this.opt.pageSize);
    }

    if (error) {
      bottomContent = colors.red('>> ') + error;
    }

    message += ansiEscapes.cursorHide;

    this.screen.render(message, bottomContent);
  }

  /**
   * When user press `enter` key
   */

  onEnd(state) {
    this.status = 'answered';
    this.dontShowHints = true;
    // Rerender prompt (and clean subline error)
    this.render();

    this.screen.done();
    this.done(state.value);
  }

  onError(state) {
    this.render(state.isValid);
  }

  getCurrentValue() {

    /**
     * This method is triggered when the user presses the `enter` key.
     *
     * @param {Object} state - The current state of the application.
     */
    this.selection = choices.map((choice) => choice.short);
    return choices.map((choice) => choice.value);
  }

  onUpKey() {
    this.pointer = incrementListIndex(this.pointer, 'up', this.opt);
    this.render();
  }

  onDownKey() {
    /**
     * Handles error state by rendering the component with the validity of the state.
     *
     * @param {Object} state - The current state object containing validation information.
     * @param {boolean} state.isValid - Indicates whether the current state is valid.
     *
     * This method updates the UI based on whether the provided state is valid or not.
     * It calls the `render` method with the `isValid` property of the state to display
     * the component accordingly.
     */
    this.pointer = incrementListIndex(this.pointer, 'down', this.opt);
    this.render();
  }

  /**
   * Retrieves the current values of checked choices from the options list.
   *
   * @returns {Array} An array of values corresponding to the currently selected choices.
   *
   * This method filters through the available choices, selecting only those that are
   * checked and not disabled. It then maps these selections to their short representations
   * and returns an array of their actual values.
   */
  onNumberKey(input) {
    if (input <= this.opt.choices.realLength) {
      this.pointer = input - 1;
      this.toggleChoice(this.pointer);
    }

    this.render();
  }

  /**
   * Handles the up key press event.
   * Moves the pointer to the previous item in the list based on the current options and then re-renders the component.
   */
  onSpaceKey() {
    this.toggleChoice(this.pointer);
    this.render();
  }

  /**
   * Handles the down key event by incrementing the list index to move the pointer downward and re-renders the UI.
   *
   * @function onDownKey
   * @name onDownKey
   */
  onAllKey() {
    const shouldBeChecked = this.opt.choices.some(
      (choice) => choice.type !== 'separator' && !choice.checked,
    );

    /**
     * Handles the number key input to navigate through choices.
     *
     * @param {number} input - The index of the choice to be selected.
     * @throws {Error} If the input is out of the range of valid choices.
     */
    this.opt.choices.forEach((choice) => {
      if (choice.type !== 'separator') {
        choice.checked = shouldBeChecked;
      }
    });

    this.render();
  }

  /**
   * Triggers actions when the space key is pressed.
   *
   * @function onSpaceKey
   * @public
   */
  onInverseKey() {
    this.opt.choices.forEach((choice) => {
      if (choice.type !== 'separator') {
        choice.checked = !choice.checked;
      }
    /**
     * Toggles the 'checked' property for all choices except separators based on their current state.
     *
     * @returns {void} This method does not return anything.
     */
    });

    this.render();
  }

  toggleChoice(index) {
    const item = this.opt.choices.getChoice(index);
    if (item !== undefined) {
      this.opt.choices.getChoice(index).checked = !item.checked;
    }
  }
}


/**
 * Toggles the checked state of all choices except separators.
 *
 * This method iterates over each choice in the `opt.choices` array and toggles the `checked`
 * property of each choice if it is not a separator. After updating the choices, it calls the
 * `render` method to update the UI accordingly.
 */
/**
 * Function for rendering checkbox choices.
 *
 * @param {Object[]} choices - Array of objects representing the choices to be rendered.
 *   Each object should have properties like `type`, `name`, `checked`, and optionally `disabled`.
 * @param {Number} pointer - The position of the current selection pointer.
 * @returns {String} Rendered content as a string.
 *
 * Example usage:
 * const choices = [
 /**
  * Toggles the checked state of an option at the specified index.
  *
  * @param {number} index - The index of the option to toggle.
  */
 *   { type: 'checkbox', name: 'Option 1', checked: true },
 *   { type: 'separator' },
 *   { type: 'checkbox', name: 'Option 2', disabled: true }
 * ];
 * console.log(renderChoices(choices, 0));
 *
 * @throws {Error} If choices is not an array or if pointer is out of bounds.
 */
function renderChoices(choices, pointer) {
  let output = '';
  let separatorOffset = 0;

  choices.forEach((choice, i) => {
    if (choice.type === 'separator') {
      separatorOffset++;
      output += ' ' + choice + '\n';
      return;
    }

    if (choice.disabled) {
      separatorOffset++;
      output += ' - ' + choice.name;
      output += ` (${
        typeof choice.disabled === 'string' ? choice.disabled : 'Disabled'
      })`;
    } else {
      const line = getCheckbox(choice.checked) + ' ' + choice.name;
      output +=
        i - separatorOffset === pointer
          ? colors.cyan(figures.pointer + line)
          : ' ' + line;
    }

    output += '\n';
  });

  return output.replaceAll(/\n$/g, '');
}


/**
 * Get the checkbox icon as a string.
 *
 * @param {boolean} checked - Whether the checkbox should be checked or not.
 * @returns {string} The composited checkbox string.
 *
 * @example
 * // Returns '✓' if checked is true, otherwise returns '□'
 * console.log(getCheckbox(true));  // Output: '✓'
 * console.log(getCheckbox(false)); // Output: '□'
 */
function getCheckbox(checked) {
  return checked ? colors.green(figures.radioOn) : figures.radioOff;
}
