import assert from 'node:assert';

import Separator from './separator.js';
import Choice from './choice.js';

/**
 * Choices collection
 * Collection of multiple `choice` object
 */
export default class Choices {
  /** @param {Array} choices  All `choice` to keep in the collection */
  constructor(choices, answers) {
    this.choices = choices.map((val) => {
      if (val.type === 'separator') {
        if (!(val instanceof Separator)) {
          val = new Separator(val.line);
        }

        return val;
      }

      return new Choice(val, answers);
    });

    this.realChoices = this.choices
      .filter(Separator.exclude)
      .filter((item) => !item.disabled);

    Object.defineProperty(this, 'length', {
      get() {
        return this.choices.length;
      },
      set(val) {
        this.choices.length = val;
      },
    });

    Object.defineProperty(this, 'realLength', {
      get() {
        return this.realChoices.length;
      },
      set() {
        throw new Error('Cannot set `realLength` of a Choices collection');
      },
    });
  }

  [Symbol.iterator]() {
    const data = this.choices;
    let index = -1;

    return {
      next: () => ({ value: data[++index], done: !(index in data) }),
    };
  }

  /**
   * Get a valid choice from the collection.
   *
   * @param {number} selector - The selected choice index.
   * @return {Choice|undefined} - Return the matched choice or undefined if no match is found.
   * @throws {Error} - Throws an error if the selector is not a number.
   */
  getChoice(selector) {
    assert(typeof selector === 'number');
    return this.realChoices[selector];
  }

  /**
   * Get a raw element from the collection.
   *
   * @param {number} selector - The selected index value.
   * @return {(Choice|undefined)} Return the matched choice or undefined if no match is found.
   *
   * @throws {TypeError} If `selector` is not a number.
   */
  get(selector) {
    assert(typeof selector === 'number');
    return this.choices[selector];
  }

  /**
   * Match the valid choices against a where clause.
   *
   * @param {Function|Object} whereClause - A filter function or key-value object to match against.
   * @return {Array} - Matching choices or an empty array if no matches are found.
   */
  where(whereClause) {
    let filterFn;
    if (typeof whereClause === 'function') {
      filterFn = whereClause;
    } else {
      const [key, value] = Object.entries(whereClause)[0];
      filterFn = (choice) => choice[key] === value;
    }

    return this.realChoices.filter(filterFn);
  }

  /**
   * Pluck a particular key from the choices
   *
   * @param {string} propertyName - Property name to select
   * @returns {Array} Selected properties
   */
  pluck(propertyName) {
    return this.realChoices.map((choice) => choice[propertyName]);
  }

  // Expose usual Array methods
  /**
   * Finds the index of the specified element in the choices array.
   *
   * @param {*} args - Arguments to pass to the Array.prototype.indexOf method.
   * @returns {number} The first index at which a given element can be found in the array, or -1 if it is not present.
   *
   * @example
   * const language = new SupportedLanguage(['JavaScript', 'Python', 'Java']);
   * console.log(language.indexOf('Python')); // Output: 1
   */
  indexOf(...args) {
    return this.choices.indexOf(...args);
  }

  /**
   * Executes a provided function once for each array element.
   *
   * @param {Function} callback - Function to execute on each element, taking three arguments: currentValue, index, and array.
   * @param {Object} [thisArg] - Value to use as `this` when executing the callback.
   * @returns {undefined}
   *
   * @example
   * const choices = new SupportedLanguage.JAVASCRIPT();
   * choices.choices = ['JavaScript', 'Python', 'Java'];
   * choices.forEach(function(language) {
   *   console.log(language);
   * });
   */
  forEach(...args) {
    return this.choices.forEach(...args);
  }

  /**
   * Filters the choices array based on the provided arguments.
   *
   * @param {...*} args - Arguments to pass to the Array.prototype.filter method.
   * @returns {Array} A new array with all elements that pass the test implemented by the provided function.
   *
   * @example
   * const languageFilter = new LanguageFilter(['English', 'Spanish', 'French']);
   * const filteredLanguages = languageFilter.filter(lang => lang.startsWith('E'));
   * console.log(filteredLanguages); // Output: ['English']
   */
  filter(...args) {
    return this.choices.filter(...args);
  }

  /**
   * Applies a function against an accumulator and each element in the array (from left to right) to reduce it to a single value.
   *
   * @param {Function} callback - A function that is applied to each element of the array, taking four arguments:
   *   @param {*} accumulator - The accumulated value previously returned in the last invocation of the callback, or initialValue, if supplied.
   *   @param {*} currentValue - The current element being processed in the array.
   *   @param {number} currentIndex - The index of the current element being processed in the array.
   *   @param {Array} array - The array reduce was called upon.
   * @param {*} [initialValue] - A value to use as the first argument to the first call of the callback. If no initial value is supplied, the first element in the array will be used and skipped from the invocation of callback.
   * @returns {*}
   *
   * @throws {TypeError} - If the array is empty and an initialValue is not provided, or if the callback is not a function.
   *
   * @example
   * const arr = [1, 2, 3];
   * const sum = arr.reduce((accumulator, currentValue) => accumulator + currentValue);
   * console.log(sum); // Output: 6
   */
  reduce(...args) {
    return this.choices.reduce(...args);
  }

  /**
   * Finds the first element in the array that satisfies the provided testing function.
   *
   * @param {Function} func - A function to test each element of the array. Returns true if the element should be included in the resulting array, otherwise false.
   * @returns {any} The first element that passes the test, or undefined if no elements pass the test.
   * @example
   * const languages = new SupportedLanguage();
   * languages.choices.push('JavaScript', 'Python', 'Java');
   * const result = languages.find(choice => choice === 'Python');
   * console.log(result); // Output: 'Python'
   */
  find(func) {
    return this.choices.find(func);
  }

  /**
   * Checks if any of the choices in the current instance satisfy the provided function.
   *
   * @param {Function} func - A function that takes a choice as an argument and returns a boolean value.
   * @returns {boolean} - Returns true if any choice satisfies the function, otherwise false.
   *
   * @example
   * const language = new SupportedLanguage();
   * language.choices = ['JavaScript', 'Python', 'Java'];
   * const result = language.some(choice => choice.includes('Script'));
   * console.log(result); // Output: true
   */
  some(func) {
    return this.choices.some(func);
  }

  push(...args) {
    const objs = args.map((val) => new Choice(val));
    this.choices.push(...objs);
    this.realChoices = this.choices
      .filter(Separator.exclude)
      .filter((item) => !item.disabled);
    return this.choices;
  }
}
