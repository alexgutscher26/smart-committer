import assert from 'node:assert';

import Separator from './separator.js';
import Choice from './choice.js';

/**
 * Choices collection
 * Collection of multiple `choice` object
 */
export default class Choices {
  /** @param {Array} choices  All `choice` to keep in the collection */
  constructor(choices, answers) {
    this.choices = choices.map((val) => {
      if (val.type === 'separator') {
        if (!(val instanceof Separator)) {
          val = new Separator(val.line);
        }

        return val;
      }

      return new Choice(val, answers);
    });

    this.realChoices = this.choices
      .filter(Separator.exclude)
      .filter((item) => !item.disabled);

    Object.defineProperty(this, 'length', {
      get() {
        return this.choices.length;
      },
      set(val) {
        this.choices.length = val;
      },
    });

    Object.defineProperty(this, 'realLength', {
      get() {
        return this.realChoices.length;
      },
      set() {
        throw new Error('Cannot set `realLength` of a Choices collection');
      },
    });
  }

  [Symbol.iterator]() {
    const data = this.choices;
    let index = -1;

    return {
      next: () => ({ value: data[++index], done: !(index in data) }),
    };
  }

  /**
   * Get a valid choice from the collection.
   *
   * @param {Number} selector - The selected choice index.
   * @return {Choice|undefined} - Returns the matched choice or undefined.
   */
  getChoice(selector) {
    assert(typeof selector === 'number');
    return this.realChoices[selector];
  }

  /**
   * Get a raw element from the collection.
   *
   * @param {number} selector - The selected index value.
   * @return {Choice|undefined} - Returns the matched choice or undefined if not found.
   * @throws {Error} - Throws an error if the selector is not a number.
   */
  get(selector) {
    assert(typeof selector === 'number');
    return this.choices[selector];
  }

  /**
   * Match the valid choices against a where clause.
   *
   * @param {Function|Object} whereClause - The filter function or key-value object to match against.
   * @return {Array} - Matching choices or an empty array.
   */
  where(whereClause) {
    let filterFn;
    if (typeof whereClause === 'function') {
      filterFn = whereClause;
    } else {
      const [key, value] = Object.entries(whereClause)[0];
      filterFn = (choice) => choice[key] === value;
    }

    return this.realChoices.filter(filterFn);
  }

  /**
   * Pluck a particular key from the choices.
   *
   * @param {String} propertyName - The property name to select.
   * @return {Array}               An array of selected properties.
   */
  pluck(propertyName) {
    return this.realChoices.map((choice) => choice[propertyName]);
  }

  // Expose usual Array methods
  /**
   * Returns the index of the first occurrence of a value in the array, or -1 if it is not present.
   *
   * @param {*} value - The value to search for.
   * @returns {number} - The index of the value, or -1 if not found.
   *
   * @example
   * const choices = new Choices(['JavaScript', 'Python', 'Java']);
   * console.log(choices.indexOf('Python')); // Output: 1
   */
  indexOf(...args) {
    return this.choices.indexOf(...args);
  }

  /**
   * Executes a provided function once for each array element.
   *
   * @param {Function} callback - The function to execute on each array element.
   * @param {Object} [thisArg] - Value to use as `this` when executing the callback.
   * @returns {undefined}
   *
   * @example
   * const choices = new SupportedLanguage.JAVASCRIPT();
   * choices.choices = ['JavaScript', 'TypeScript', 'React'];
   * choices.forEach((lang) => {
   *   console.log(lang);
   * });
   */
  forEach(...args) {
    return this.choices.forEach(...args);
  }

  /**
   * Filters the choices array based on the provided arguments.
   *
   * @param {...*} args - Arguments to pass to the filter function.
   * @returns {Array} - A new array with elements that pass the test implemented by the provided function.
   *
   * @example
   * const supportedLanguage = new SupportedLanguage();
   * const filteredChoices = supportedLanguage.filter(choice => choice.language === 'JavaScript');
   */
  filter(...args) {
    return this.choices.filter(...args);
  }

  /**
   * Applies a function against an accumulator and each element in the array (from left to right) to reduce it to a single value.
   *
   * @param {Function} callback - A function that is called on every element of the array. It takes four arguments:
   *   @arg accumulator - The accumulated value previously returned in the last invocation of the callback, or initialValue, if supplied.
   *   @arg currentValue - The current element being processed in the array.
   *   @arg currentIndex - The index of the current element being processed in the array.
   *   @arg array - The array reduce was called upon.
   * @param {*} [initialValue] - A value to use as the first argument to the first call of the callback. If no initial value is supplied, the first element of the array will be used and skipped from the first invocation of the callback function.
   * @returns {*} The accumulated result.
   *
   * @throws {TypeError} If the callback is not a function.
   *
   * @example
   * const array = [1, 2, 3, 4];
   * const sum = array.reduce(function(accumulator, currentValue) {
   *   return accumulator + currentValue;
   * }, 0);
   * console.log(sum); // Output: 10
   */
  reduce(...args) {
    return this.choices.reduce(...args);
  }

  /**
   * Finds the first element in the array that satisfies the provided testing function.
   *
   * @param {Function} func - A function that takes an element as input and returns true if the element should be included, false otherwise.
   * @returns {*} The first element that passes the test. If no elements pass the test, undefined is returned.
   *
   * @example
   * const choices = new SupportedLanguage.JAVASCRIPT(['Java', 'JavaScript', 'Python']);
   * const result = choices.find(choice => choice === 'JavaScript');
   * console.log(result); // Output: 'JavaScript'
   */
  find(func) {
    return this.choices.find(func);
  }

  /**
   * Checks if any element in the array satisfies the provided testing function.
   *
   * @param {Function} func - A function that tests each element of the array. It is invoked with three arguments:
   *   @arg {*} currentElement - The current element being processed in the array.
   *   @arg {number} [index] - The index of the current element being processed in the array.
   *   @arg {*[]} [array] - The array `some` was called upon.
   *   @returns {boolean} - Returns true if the callback function returns a truthy value for any array element; otherwise, false.
   *
   * @returns {boolean} - True if any element in the array satisfies the testing function, otherwise false.
   *
   * @example
   * const numbers = [1, 2, 3, 4];
   * const hasEvenNumber = numbers.some(num => num % 2 === 0);
   * console.log(hasEvenNumber); // true
   */
  some(func) {
    return this.choices.some(func);
  }

  /**
   * Adds one or more choices to the current list of choices.
   *
   * @param {...any} args - The choices to add. Each choice can be any value that will be passed to the Choice constructor.
   * @returns {Array<Choice>} The updated array of choices.
   *
   * @example
   * const multiSelect = new MultiSelect();
   * multiSelect.push('Option 1', 'Option 2');
   * console.log(multiSelect.choices); // Output: [Choice('Option 1'), Choice('Option 2')]
   */
  push(...args) {
    const objs = args.map((val) => new Choice(val));
    this.choices.push(...objs);
    this.realChoices = this.choices
      .filter(Separator.exclude)
      .filter((item) => !item.disabled);
    return this.choices;
  }
}
