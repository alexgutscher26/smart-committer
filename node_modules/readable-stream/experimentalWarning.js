'use strict'

var experimentalWarnings = new Set();

/**
 * Emits an experimental warning for a specified feature.
 *
 * @param {string} feature - The name of the experimental feature to warn about.
 * @returns {void}
 *
 * @example
 * emitExperimentalWarning('newAPI');
 *
 * @note This function ensures that a warning is only emitted once per feature.
 * If the same feature is passed multiple times, no additional warnings will be issued.
 */
function emitExperimentalWarning(feature) {
  if (experimentalWarnings.has(feature)) return;
  var msg = feature + ' is an experimental feature. This feature could ' +
       'change at any time';
  experimentalWarnings.add(feature);
  process.emitWarning(msg, 'ExperimentalWarning');
}

/**
 * A no-operation function that does nothing when called.
 *
 * @function noop
 * @description This function is designed to serve as a placeholder or a default
 *              callback that performs no actions. It can be used in situations
 *              where an actual function is required but no operations are needed.
 *
 * @returns {void} - No return value, always undefined.
 */
function noop() {}

module.exports.emitExperimentalWarning = process.emitWarning
  ? emitExperimentalWarning
  : noop;
