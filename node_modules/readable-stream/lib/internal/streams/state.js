'use strict';

var ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;
/**
 * Retrieves the high water mark value from the given options object based on the duplex type.
 *
 * @param {Object} options - The options object containing high water mark settings.
 * @param {boolean} isDuplex - Indicates whether the stream is a duplex stream.
 * @param {string} duplexKey - The key used in the options object for duplex streams.
 * @returns {number|null} The high water mark value if found; otherwise, null.
 *
 * @example
 * const options = { highWaterMark: 16 };
 * const isDuplex = true;
 * const duplexKey = 'duplexHighWaterMark';
 * const result = highWaterMarkFrom(options, isDuplex, duplexKey); // Returns 16
 */
function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
/**
 * Retrieves the high water mark for a stream based on the provided options and context.
 *
 * @param {Object} state - The internal state object of the stream.
 * @param {Object} options - Configuration options for the stream.
 * @param {string} duplexKey - Key used in duplex mode to identify high water mark.
 * @param {boolean} isDuplex - Indicates whether the stream is a duplex stream.
 * @returns {number} The calculated high water mark value.
 *
 * @throws {ERR_INVALID_OPT_VALUE} If the provided high water mark value is not a finite, non-negative integer.
 *
 * @example
 * const state = { objectMode: true };
 * const options = { highWaterMark: 1024 };
 * const duplexKey = 'myDuplexStream';
 * const isDuplex = true;
 * const hwm = getHighWaterMark(state, options, duplexKey, isDuplex);
 * console.log(hwm); // Outputs: 16
 */
function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }
    return Math.floor(hwm);
  }

  // Default value
  return state.objectMode ? 16 : 16 * 1024;
}
module.exports = {
  getHighWaterMark: getHighWaterMark
};