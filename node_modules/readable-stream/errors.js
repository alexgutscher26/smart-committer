'use strict';

const codes = {};

/**
 * Creates a new error type with an optional base class.
 *
 * @param {string} code - A unique code for the error type.
 * @param {(string|function)} message - The error message or a function that returns the error message when called with arguments arg1, arg2, and arg3.
 * @param {Error} [Base=Error] - The base class for the new error type. Defaults to Error if not provided.
 */
function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error
  }

  /**
   * Retrieves a message based on the provided arguments.
   * If `message` is a string, it returns that string.
   * If `message` is a function, it calls the function with `arg1`, `arg2`, and `arg3` as arguments and returns its result.
   *
   * @param {string|Function} message - The message to retrieve or a function that generates the message.
   * @param {*} arg1 - The first argument to pass to the function if `message` is a function.
   * @param {*} arg2 - The second argument to pass to the function if `message` is a function.
   * @param {*} arg3 - The third argument to pass to the function if `message` is a function.
   * @returns {string} - The retrieved message or the result of calling the function with provided arguments.
   */
  function getMessage (arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message
    } else {
      return message(arg1, arg2, arg3)
    }
  }

  class NodeError extends Base {
    constructor (arg1, arg2, arg3) {
      super(getMessage(arg1, arg2, arg3));
    }
  }

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;

  codes[code] = NodeError;
}

// https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
/**
 * Generates a human-readable string indicating that something must be one of a set of values.
 *
 * @param {Array|string} expected - The array or single value representing the acceptable choices.
 * @param {string} thing - A description of what "thing" is, typically used for clarity in error messages.
 * @returns {string} A string describing the acceptable choices in a user-friendly manner.
 *
 * @example
 * oneOf(['apple', 'banana', 'cherry'], 'fruit');
 * // returns "one of fruit apple, banana, or cherry"
 *
 * @example
 * oneOf(['red', 'blue'], 'color');
 * // returns "one of color red or blue"
 *
 * @example
 * oneOf('apple', 'item');
 * // returns "of item apple"
 */
function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    const len = expected.length;
    expected = expected.map((i) => String(i));
    if (len > 2) {
      return `one of ${thing} ${expected.slice(0, len - 1).join(', ')}, or ` +
             expected[len - 1];
    } else if (len === 2) {
      return `one of ${thing} ${expected[0]} or ${expected[1]}`;
    } else {
      return `of ${thing} ${expected[0]}`;
    }
  } else {
    return `of ${thing} ${String(expected)}`;
  }
}

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
/**
 * Determines if a string begins with the characters of a specified string.
 *
 * @param {string} str - The string to search in.
 * @param {string} search - The string to search for at the start of `str`.
 * @param {number} [pos=0] - Optional position in `str` at which to begin searching for `search`. Defaults to 0.
 * @returns {boolean} - Returns true if the `str` starts with the characters of `search`, otherwise false.
 *
 * @example
 * // Returns true because "Hello, world!" starts with "Hello"
 * console.log(startsWith("Hello, world!", "Hello"));
 *
 * @example
 * // Returns false because "Goodbye" does not start with "Hello"
 * console.log(startsWith("Goodbye", "Hello"));
 *
 * @example
 * // Returns true because "Hello, world!" starts with "world" starting from position 7
 * console.log(startsWith("Hello, world!", "world", 7));
 */
function startsWith(str, search, pos) {
	return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
}

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function endsWith(str, search, this_len) {
	if (this_len === undefined || this_len > str.length) {
		this_len = str.length;
	}
	return str.substring(this_len - search.length, this_len) === search;
}

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"'
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  let determiner;
  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  let msg;
  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = `The ${name} ${determiner} ${oneOf(expected, 'type')}`;
  } else {
    const type = includes(name, '.') ? 'property' : 'argument';
    msg = `The "${name}" ${type} ${determiner} ${oneOf(expected, 'type')}`;
  }

  msg += `. Received type ${typeof actual}`;
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented'
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');

module.exports.codes = codes;
