import assert from 'node:assert';

import Separator from './separator.js';
import Choice from './choice.js';

/**
 * Choices collection
 * Collection of multiple `choice` object
 */
export default class Choices {
  /** @param {Array} choices  All `choice` to keep in the collection */
  constructor(choices, answers) {
    this.choices = choices.map((val) => {
      if (val.type === 'separator') {
        if (!(val instanceof Separator)) {
          val = new Separator(val.line);
        }

        return val;
      }

      return new Choice(val, answers);
    });

    this.realChoices = this.choices
      .filter(Separator.exclude)
      .filter((item) => !item.disabled);

    Object.defineProperty(this, 'length', {
      get() {
        return this.choices.length;
      },
      set(val) {
        this.choices.length = val;
      },
    });

    Object.defineProperty(this, 'realLength', {
      get() {
        return this.realChoices.length;
      },
      set() {
        throw new Error('Cannot set `realLength` of a Choices collection');
      },
    });
  }

  [Symbol.iterator]() {
    const data = this.choices;
    let index = -1;

    return {
      next: () => ({ value: data[++index], done: !(index in data) }),
    };
  }

  /**
   * Retrieves a valid choice from the collection using the provided selector index.
   *
   * @param {Number} selector - The index of the selected choice to retrieve.
   * @returns {Choice|Undefined} - Returns the matched choice if found, otherwise undefined.
   *
   * Example usage:
   * const choice = instance.getChoice(0);
   * console.log(choice); // Output depends on the choices available
   */
  getChoice(selector) {
    assert(typeof selector === 'number');
    return this.realChoices[selector];
  }

  /**
   * Get a raw element from the collection.
   *
   * @param {number} selector - The selected index value.
   * @return {Choice|undefined} Return the matched choice or undefined if not found.
   */
  get(selector) {
    assert(typeof selector === 'number');
    return this.choices[selector];
  }

  /**
   * Match the valid choices against a where clause.
   *
   * @param {Function|Object} whereClause - The filter function or key-value object to match against.
   * @returns {Array} Matching choices or an empty array.
   */
  where(whereClause) {
    let filterFn;
    if (typeof whereClause === 'function') {
      filterFn = whereClause;
    } else {
      const [key, value] = Object.entries(whereClause)[0];
      filterFn = (choice) => choice[key] === value;
    }

    return this.realChoices.filter(filterFn);
  }

  /**
   * Plucks a particular key from each choice object in the collection.
   *
   * @param {string} propertyName - The property name to select from each choice object.
   * @return {Array} An array containing the values of the specified property for each choice object.
   * @throws {Error} If `propertyName` is not a string or is empty.
   */
  pluck(propertyName) {
    return this.realChoices.map((choice) => choice[propertyName]);
  }

  // Expose usual Array methods
  /**
   * Returns the index of the first occurrence of a value in the choices array that matches the provided arguments, or -1 if no match is found.
   *
   * @param {...*} args - Arguments to be passed to the `indexOf` method of the `choices` array.
   * @returns {number} The index of the first occurrence of the matching value, or -1 if not found.
   */
  indexOf(...args) {
    return this.choices.indexOf(...args);
  }

  /**
   * Executes a provided function once for each array element.
   *
   * @param {Function} callback - The function to execute for each element.
   * @param {*} [thisArg] - Value to use as `this` when executing the callback.
   * @throws {TypeError} If the callback is not a function.
   * @returns {void}
   */
  forEach(...args) {
    return this.choices.forEach(...args);
  }

  /**
   * Filters elements of an array that pass a test implemented by a provided function.
   *
   * @param {Function} callback - A function to test each element of the array. The function should return a boolean value.
   * @param {Object} [thisArg] - Value to use as `this` when executing `callback`.
   * @returns {Array} A new array with all elements that pass the test implemented by the provided function.
   *
   * @example
   * const array = [1, 2, 3, 4];
   * const filteredArray = array.filter(item => item > 2);
   * console.log(filteredArray); // Output: [3, 4]
   */
  filter(...args) {
    return this.choices.filter(...args);
  }

  /**
   * Applies a function against an accumulator and each element in the array (from left to right) to reduce it to a single value.
   *
   * @param {Function} reducer - A function that reduces the array to a single value.
   * @param {*} [initialValue] - An initial value to use as the first argument to the first call of the reducer. If no initial value is supplied, the first element in the array will be used.
   * @returns {*} The reduced value.
   *
   * @example
   * const sum = reduce([1, 2, 3], (accumulator, currentValue) => accumulator + currentValue);
   * console.log(sum); // Output: 6
   */
  reduce(...args) {
    return this.choices.reduce(...args);
  }

  /**
   * Finds the first element in the choices array that satisfies the provided testing function.
   *
   * @param {function} func - A function to execute on each value in the array, taking three arguments (element, index, array).
   * The return value of the function is a boolean indicating whether the element should be included in the resulting array.
   * @returns {*} - The first element that satisfies the testing function, or undefined if no such element is found.
   *
   * @example
   * const languages = new SupportedLanguage(['JavaScript', 'Python', 'Java']);
   * const result = languages.find(language => language.startsWith('P'));
   * console.log(result); // Outputs: Python
   */
  find(func) {
    return this.choices.find(func);
  }

  /**
   * Checks if any element in an array passes a test implemented by a provided function.
   *
   * @param {Function} func - A function that tests each element, returning true if the condition is met.
   * @returns {boolean} Returns true if at least one element in the array passes the test; otherwise, false.
   *
   * @example
   * // Example usage:
   * const choices = [1, 2, 3];
   * const hasEvenNumber = choices.some((num) => num % 2 === 0);
   * console.log(hasEvenNumber); // Output: true
   */
  some(func) {
    return this.choices.some(func);
  }

  /**
   * Adds one or more choices to the collection.
   *
   * @param {...any} args - The choices to add. Each choice can be of any type, and will be wrapped in a Choice object.
   * @returns {Choice[]} The updated array of Choice objects after adding the new choices.
   *
   * @example
   * // Adding multiple choices
   * myCollection.push('Option 1', 'Option 2');
   *
   * @example
   * // Adding a single choice
   * myCollection.push('Single Option');
   */
  push(...args) {
    const objs = args.map((val) => new Choice(val));
    this.choices.push(...objs);
    this.realChoices = this.choices
      .filter(Separator.exclude)
      .filter((item) => !item.disabled);
    return this.choices;
  }
}
