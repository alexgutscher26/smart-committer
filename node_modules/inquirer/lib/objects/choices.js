import assert from 'node:assert';

import Separator from './separator.js';
import Choice from './choice.js';

/**
 * Choices collection
 * Collection of multiple `choice` object
 */
export default class Choices {
  /** @param {Array} choices  All `choice` to keep in the collection */
  constructor(choices, answers) {
    this.choices = choices.map((val) => {
      if (val.type === 'separator') {
        if (!(val instanceof Separator)) {
          val = new Separator(val.line);
        }

        return val;
      }

      return new Choice(val, answers);
    });

    this.realChoices = this.choices
      .filter(Separator.exclude)
      .filter((item) => !item.disabled);

    Object.defineProperty(this, 'length', {
      get() {
        return this.choices.length;
      },
      set(val) {
        this.choices.length = val;
      },
    });

    Object.defineProperty(this, 'realLength', {
      get() {
        return this.realChoices.length;
      },
      set() {
        throw new Error('Cannot set `realLength` of a Choices collection');
      },
    });
  }

  [Symbol.iterator]() {
    const data = this.choices;
    let index = -1;

    return {
      next: () => ({ value: data[++index], done: !(index in data) }),
    };
  }

  /**
   * Get a valid choice from the collection
   *
   * @param {number} selector - The selected choice index.
   * @return {Choice|undefined} - Return the matched choice or undefined.
   */
  getChoice(selector) {
    assert(typeof selector === 'number');
    return this.realChoices[selector];
  }

  /**
   * Get a raw element from the collection
   *
   * @param {Number} selector - The selected index value
   * @return {Choice|Undefined} - Return the matched choice or undefined
   */
  get(selector) {
    assert(typeof selector === 'number');
    return this.choices[selector];
  }

  /**
   * Match the valid choices against a where clause.
   *
   * @param {Function|Object} whereClause - Filter function or key-value object to match against.
   * @return {Array} - Matching choices or an empty array if no matches are found.
   *
   * Example usage:
   * // Using filter function
   * const validChoices = supportedLanguageInstance.where(choice => choice.status === 'active');
   *
   * // Using key-value object
   * const validChoices = supportedLanguageInstance.where({ status: 'active' });
   */
  where(whereClause) {
    let filterFn;
    if (typeof whereClause === 'function') {
      filterFn = whereClause;
    } else {
      const [key, value] = Object.entries(whereClause)[0];
      filterFn = (choice) => choice[key] === value;
    }

    return this.realChoices.filter(filterFn);
  }

  /**
   * Plucks a particular key from the choices array.
   *
   * @param {string} propertyName - The property name to select from each choice object.
   * @returns {Array} - An array containing the values of the specified property for each choice.
   *
   * @example
   * const choices = [
   *   { id: 1, name: 'Option 1' },
   *   { id: 2, name: 'Option 2' }
   * ];
   * const names = choices.pluck('name');
   * console.log(names); // Output: ['Option 1', 'Option 2']
   */
  pluck(propertyName) {
    return this.realChoices.map((choice) => choice[propertyName]);
  }

  // Expose usual Array methods
  /**
   * Returns the index of the first occurrence of a value in an array, or -1 if it is not present.
   *
   * @param {...*} args - Arguments to pass to the native Array.prototype.indexOf method.
   * @return {number} The index of the first occurrence of the value, or -1 if it is not found.
   */
  indexOf(...args) {
    return this.choices.indexOf(...args);
  }

  /**
   * Executes a provided function once for each array element.
   *
   * @function forEach
   * @param {Function} callback - A function to execute for each element in the array.
   * @param {Object} [thisArg] - Value to use as `this` when executing callback.
   * @returns {undefined}
   *
   * @example
   * const choices = ['JavaScript', 'Python', 'Java'];
   * choices.forEach((language) => {
   *   console.log(language);
   * });
   */
  forEach(...args) {
    return this.choices.forEach(...args);
  }

  /**
   * Filters the choices array using the provided arguments.
   *
   * @param {...*} args - Arguments to pass to the Array.prototype.filter method.
   * @returns {Array} - A new array with elements that meet the condition specified by the provided function.
   */
  filter(...args) {
    return this.choices.filter(...args);
  }

  /**
   * Applies a function against an accumulator and each element in the array (from left to right) to reduce it to a single output value.
   *
   * @param {...*} args - Arguments for the `reduce` method, as per JavaScript Array.reduce documentation.
   * @returns {*} The reduced value after applying the reducer function across all elements of the array.
   *
   * @example
   * const choices = [1, 2, 3, 4];
   * const result = choices.reduce((acc, curr) => acc + curr);
   * console.log(result); // Output: 10
   */
  reduce(...args) {
    return this.choices.reduce(...args);
  }

  /**
   * Searches for a single element that matches a specified condition in an array of choices.
   *
   * @param {function} func - A function that takes an element from the array and returns true if it meets the condition, false otherwise.
   * @returns {any | undefined} The first element in the array that satisfies the provided testing function. Otherwise, undefined is returned.
   */
  find(func) {
    return this.choices.find(func);
  }

  /**
   * Checks if any element in the choices array satisfies the provided testing function.
   *
   * @function some
   * @param {Function} func - A function that tests each element, returning true or false.
   * @returns {boolean} - Returns true if at least one element passes the test, otherwise false.
   */
  some(func) {
    return this.choices.some(func);
  }

  /**
   * Adds one or more elements to the end of an array.
   *
   * @param {...*} args - The elements to add to the array. Each element will be converted into a `Choice` object.
   * @returns {Array<Choice>} The updated array with all added choices.
   */
  push(...args) {
    const objs = args.map((val) => new Choice(val));
    this.choices.push(...objs);
    this.realChoices = this.choices
      .filter(Separator.exclude)
      .filter((item) => !item.disabled);
    return this.choices;
  }
}
