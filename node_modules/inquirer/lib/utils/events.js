import { fromEvent, filter, map, share, takeUntil } from 'rxjs';

/**
 * Normalizes keypress events to ensure consistent handling.
 *
 * @param {string} value - The value of the key pressed.
 * @param {Object} [key={}] - Additional details about the key event, optional.
 * @returns {{value: string, key: Object}} An object containing the normalized value and key details.
 */
function normalizeKeypressEvents(value, key) {
  return { value, key: key || {} };
}

/**
 * Observes events from a readline interface and processes them to extract specific keypress events.
 *
 * @param {Object} rl - The readline interface object.
 * @return {Object} An object containing observables for various keypress events.
 * @throws {Error} Throws an error if the readline interface is not provided or if it does not have a valid input stream.
 */
export default function observe(rl) {
  const keypress = fromEvent(rl.input, 'keypress', normalizeKeypressEvents)
    .pipe(takeUntil(fromEvent(rl, 'close')))
    // Ignore `enter` key. On the readline, we only care about the `line` event.
    .pipe(filter(({ key }) => key.name !== 'enter' && key.name !== 'return'));

  return {
    line: fromEvent(rl, 'line'),
    keypress,

    normalizedUpKey: keypress.pipe(
      filter(
        ({ key }) =>
          key.name === 'up' || key.name === 'k' || (key.name === 'p' && key.ctrl),
      ),
      share(),
    ),

    normalizedDownKey: keypress.pipe(
      filter(
        ({ key }) =>
          key.name === 'down' || key.name === 'j' || (key.name === 'n' && key.ctrl),
      ),
      share(),
    ),

    numberKey: keypress.pipe(
      filter((e) => e.value && '123456789'.includes(e.value)),
      map((e) => Number(e.value)),
      share(),
    ),

    spaceKey: keypress.pipe(
      filter(({ key }) => key && key.name === 'space'),
      share(),
    ),
    aKey: keypress.pipe(
      filter(({ key }) => key && key.name === 'a'),
      share(),
    ),
    iKey: keypress.pipe(
      filter(({ key }) => key && key.name === 'i'),
      share(),
    ),
  };
}
