import { fromEvent, filter, map, share, takeUntil } from 'rxjs';

/**
 * Normalizes keypress events by adding default values for undefined properties.
 *
 * @param {string} value - The input value associated with the keypress event.
 * @param {Object} [key={}] - An optional object containing additional information about the keypress event. Defaults to an empty object if not provided.
 * @returns {Object} An object containing the normalized keypress event properties.
 *
 * Example:
 * const normalizedEvent = normalizeKeypressEvents('A', { modifiers: ['Shift'] });
 * console.log(normalizedEvent); // Output: { value: 'A', key: { modifiers: ['Shift'] } }
 */
function normalizeKeypressEvents(value, key) {
  return { value, key: key || {} };
}

/**
 * Observes events emitted by a readline interface (rl) and returns an object containing various streams of keypress events.
 *
 * @param {Object} rl - The readline interface to observe. Must have 'input', 'keypress', and 'line' events.
 * @returns {Object} An object with several properties, each being a stream of specific keypress or line events:
 *   - `line`: A ReadableStream of line events from the readline interface.
 *   - `keypress`: A ReadableStream of all keypress events except 'enter'.
 *   - `normalizedUpKey`: A ReadableStream of normalized up arrow key events, including 'up', 'k', and 'p' with Ctrl modifier.
 *   - `normalizedDownKey`: A ReadableStream of normalized down arrow key events, including 'down', 'j', and 'n' with Ctrl modifier.
 *   - `numberKey`: A ReadableStream of numeric keypress events ('1' to '9').
 *   - `spaceKey`: A ReadableStream of space keypress events.
 *   - `aKey`: A ReadableStream of 'a' keypress events.
 *   - `iKey`: A ReadableStream of 'i' keypress events.
 *
 * @example
 * const readline = require('readline');
 * const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
 * const streams = observe(rl);
 * streams.line.subscribe(line => console.log(`Line: ${line}`));
 * streams.keypress.subscribe(keypress => console.log(`Keypress: ${keypress.key.name}`));
 */
export default function observe(rl) {
  const keypress = fromEvent(rl.input, 'keypress', normalizeKeypressEvents)
    .pipe(takeUntil(fromEvent(rl, 'close')))
    // Ignore `enter` key. On the readline, we only care about the `line` event.
    .pipe(filter(({ key }) => key.name !== 'enter' && key.name !== 'return'));

  return {
    line: fromEvent(rl, 'line'),
    keypress,

    normalizedUpKey: keypress.pipe(
      filter(
        ({ key }) =>
          key.name === 'up' || key.name === 'k' || (key.name === 'p' && key.ctrl),
      ),
      share(),
    ),

    normalizedDownKey: keypress.pipe(
      filter(
        ({ key }) =>
          key.name === 'down' || key.name === 'j' || (key.name === 'n' && key.ctrl),
      ),
      share(),
    ),

    numberKey: keypress.pipe(
      filter((e) => e.value && '123456789'.includes(e.value)),
      map((e) => Number(e.value)),
      share(),
    ),

    spaceKey: keypress.pipe(
      filter(({ key }) => key && key.name === 'space'),
      share(),
    ),
    aKey: keypress.pipe(
      filter(({ key }) => key && key.name === 'a'),
      share(),
    ),
    iKey: keypress.pipe(
      filter(({ key }) => key && key.name === 'i'),
      share(),
    ),
  };
}
