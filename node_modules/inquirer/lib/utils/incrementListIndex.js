/**
 * Increment or decrement the current index within a list based on the specified direction and options.
 *
 * @param {number} current - The current index in the list.
 * @param {'up' | 'down'} dir - The direction to move ('up' for previous, 'down' for next).
 * @param {Object} opt - Options object containing additional parameters.
 * @param {Array<any>} opt.choices - The array of choices or options from which the current index is selected.
 * @param {boolean} [opt.loop=true] - Whether to loop back to the start/end of the list when reaching the end/beginning.
 * @returns {number} - The new index after incrementing/decrementing.
 *
 * @throws {Error} if `dir` is not 'up' or 'down'.
 *
 * @example
 * const newIndex = incrementListIndex(2, 'up', { choices: ['a', 'b', 'c'], loop: true });
 * console.log(newIndex); // Output: 1
 */
export default function incrementListIndex(current, dir, opt) {
  const len = opt.choices.realLength;
  const shouldLoop = 'loop' in opt ? Boolean(opt.loop) : true;
  if (dir === 'up') {
    if (current > 0) {
      return current - 1;
    }
    return shouldLoop ? len - 1 : current;
  }
  if (dir === 'down') {
    if (current < len - 1) {
      return current + 1;
    }
    return shouldLoop ? 0 : current;
  }
  throw new Error('dir must be up or down');
}
