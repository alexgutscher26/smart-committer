/**
 * `list` type prompt
 */

import ansiEscapes from 'ansi-escapes';
import colors from 'yoctocolors-cjs';
import figures from '@inquirer/figures';
import { map, takeUntil } from 'rxjs';
import observe from '../utils/events.js';
import Paginator from '../utils/paginator.js';
import incrementListIndex from '../utils/incrementListIndex.js';
import Base from './base.js';

export default class CheckboxPrompt extends Base {
  constructor(questions, rl, answers) {
    super(questions, rl, answers);

    if (!this.opt.choices) {
      this.throwParamError('choices');
    }

    if (Array.isArray(this.opt.default)) {
      for (const choice of this.opt.choices) {
        if (this.opt.default.includes(choice.value)) {
          choice.checked = true;
        }
      }
    }

    this.pointer = 0;

    // Make sure no default is set (so it won't be printed)
    this.opt.default = null;

    const shouldLoop = this.opt.loop === undefined ? true : this.opt.loop;
    this.paginator = new Paginator(this.screen, { isInfinite: shouldLoop });
  }

  /**
   * Start the Inquiry session
   * @param  {Function} cb      Callback when prompt is done
   * @return {this}
   */

  _run(cb) {
    this.done = cb;

    const events = observe(this.rl);

    const validation = this.handleSubmitEvents(
      events.line.pipe(map(this.getCurrentValue.bind(this))),
    );
    validation.success.forEach(this.onEnd.bind(this));
    validation.error.forEach(this.onError.bind(this));
      .pipe(takeUntil(validation.success))
      /**
       * Start the Inquiry session.
       *
       * @param {Function} cb - Callback function to be called when the prompt is done.
       * @return {this}
       */
      .forEach(this.onDownKey.bind(this));
    events.numberKey
      .pipe(takeUntil(validation.success))
      .forEach(this.onNumberKey.bind(this));
    events.spaceKey
      .pipe(takeUntil(validation.success))
      .forEach(this.onSpaceKey.bind(this));
    events.aKey.pipe(takeUntil(validation.success)).forEach(this.onAllKey.bind(this));
    events.iKey.pipe(takeUntil(validation.success)).forEach(this.onInverseKey.bind(this));

    // Init the prompt
    this.render();
    this.firstRender = false;

    return this;
  }

  /**
   * Render the prompt to screen
   * @return {CheckboxPrompt} self
   */

  render(error) {
    // Render question
    let message = this.getQuestion();
    let bottomContent = '';

    if (!this.dontShowHints) {
      message +=
        '(Press ' +
        colors.cyan(colors.bold('<space>')) +
        ' to select, ' +
        colors.cyan(colors.bold('<a>')) +
        ' to proceed)';
    /**
     * Renders the prompt to the screen.
     *
     * @param {Error} [error] - Optional error object to display at the bottom of the prompt.
     * @returns {CheckboxPrompt} The current instance of `CheckboxPrompt`.
     */
    }

    // Render choices or answer depending on the state
    if (this.status === 'answered') {
      message += colors.cyan(this.selection.join(', '));
    } else {
      const choicesStr = renderChoices(this.opt.choices, this.pointer);
      const indexPosition = this.opt.choices.indexOf(
        this.opt.choices.getChoice(this.pointer),
      );
      const realIndexPosition =
        this.opt.choices.reduce((acc, value, i) => {
          // Dont count lines past the choice we are looking at
          if (i > indexPosition) {
            return acc;
          }
          // Add line if it's a separator
          if (value.type === 'separator') {
            return acc + 1;
          }

          let l = value.name;
          // Non-strings take up one line
          if (typeof l !== 'string') {
            return acc + 1;
          }

          // Calculate lines taken up by string
          l = l.split('\n');
          return acc + l.length;
        }, 0) - 1;
      message +=
        '\n' + this.paginator.paginate(choicesStr, realIndexPosition, this.opt.pageSize);
    }

    if (error) {
      bottomContent = colors.red('>> ') + error;
    }

    message += ansiEscapes.cursorHide;

    this.screen.render(message, bottomContent);
  }

  /**
   * When user press `enter` key
   */

  onEnd(state) {
    this.status = 'answered';
    this.dontShowHints = true;
    // Rerender prompt (and clean subline error)
    this.render();

    this.screen.done();
    this.done(state.value);
  }

  onError(state) {
    this.render(state.isValid);
    const choices = this.opt.choices.filter(
      /**
       * Handles the end of an interaction when the 'enter' key is pressed.
       *
       * @param {Object} state - The current state object containing user input and other relevant data.
       * @returns {void}
       */
      (choice) => Boolean(choice.checked) && !choice.disabled,
    );

    this.selection = choices.map((choice) => choice.short);
    return choices.map((choice) => choice.value);
  }

  onUpKey() {
    this.pointer = incrementListIndex(this.pointer, 'up', this.opt);
    this.render();
  /**
   * Handles an error state by rendering the validity of the current state.
   *
   * @param {Object} state - The current state object containing validation information.
   * @param {boolean} state.isValid - Indicates whether the current state is valid or not.
   * @throws {Error} If `state` is undefined or does not contain a boolean `isValid` property, an error will be thrown.
   */
  }

  onDownKey() {
    this.pointer = incrementListIndex(this.pointer, 'down', this.opt);
    /**
     * Retrieves the current value of selected choices from an options list.
     *
     * This method filters out any disabled or unchecked choices and maps the remaining
     * choices to their corresponding short values and actual values. It then updates the
     * internal selection with the short values and returns an array of the actual values.
     *
     * @returns {Array} An array containing the actual values of the selected choices.
     */
    this.render();
  }

  onNumberKey(input) {
    if (input <= this.opt.choices.realLength) {
      this.pointer = input - 1;
      this.toggleChoice(this.pointer);
    }

    /**
     * Handles the up key event to move the pointer up in the list and re-renders the UI.
     *
     * @function
     * @memberof SupportedLanguage.JAVASCRIPT code
     * @instance
     */
    this.render();
  }

  onSpaceKey() {
    this.toggleChoice(this.pointer);
    /**
     * Handles the down key event by incrementing the list pointer and re-rendering the UI.
     *
     * @function
     */
    this.render();
  }

  onAllKey() {
    const shouldBeChecked = this.opt.choices.some(
      /**
       * Handles input for number keys to navigate through choices.
       *
       * @param {number} input - The number key input from the user.
       */
      (choice) => choice.type !== 'separator' && !choice.checked,
    );

    this.opt.choices.forEach((choice) => {
      if (choice.type !== 'separator') {
        choice.checked = shouldBeChecked;
      }
    });

    /**
     * Triggers the toggleChoice method with the current pointer value and then calls the render method to update the display.
     *
     * @return {void}
     */
    this.render();
  }

  onInverseKey() {
    this.opt.choices.forEach((choice) => {
      /**
       * Toggles the checked state of all choices that are not separators.
       * This method is triggered when the 'onAllKey' event occurs.
       *
       * @param {Object} this - The context object containing the `opt` property with choices array.
       * @returns {void}
       */
      if (choice.type !== 'separator') {
        choice.checked = !choice.checked;
      }
    });

    this.render();
  }

  toggleChoice(index) {
    const item = this.opt.choices.getChoice(index);
    if (item !== undefined) {
      this.opt.choices.getChoice(index).checked = !item.checked;
    }
  }
/**
 * Inverts the checked state of each choice except separators and re-renders the interface.
 *
 * @returns {undefined}
 */
}


/**
 * Renders checkbox choices based on the provided list and pointer position.
 *
 * @param {Array<Object>} choices - Array of objects representing choices to be rendered. Each object can have properties like `type`, `name`, `checked`, `disabled`.
 * @param {Number} pointer - The current pointer position indicating which choice should be highlighted.
 * @returns {String} - The rendered content as a string, with each choice separated by a newline.
 *
 * Example:
 *   const choices = [
 *     { type: 'option', name: 'Option 1', checked: false },
 *     { type: 'separator' },
 *     { type: 'option', name: 'Option 2', disabled: true }
 *   ];
 *   const pointer = 0;
 *   renderChoices(choices, pointer); // Returns a string with choices rendered, highlighting 'Option 1'
 */
function renderChoices(choices, pointer) {
  let output = '';
  let separatorOffset = 0;

  choices.forEach((choice, i) => {
    if (choice.type === 'separator') {
      separatorOffset++;
      output += ' ' + choice + '\n';
      return;
    }

    if (choice.disabled) {
      separatorOffset++;
      output += ' - ' + choice.name;
      output += ` (${
        typeof choice.disabled === 'string' ? choice.disabled : 'Disabled'
      })`;
    } else {
      const line = getCheckbox(choice.checked) + ' ' + choice.name;
      output +=
        i - separatorOffset === pointer
          ? colors.cyan(figures.pointer + line)
          : ' ' + line;
    }

    output += '\n';
  });

  return output.replaceAll(/\n$/g, '');
}


/**
 * Generates a checkbox string based on whether it is checked or not.
 *
 * @param {boolean} checked - A boolean indicating whether the checkbox should be checked (true) or unchecked (false).
 * @return {string} A string representing the checkbox, either with a checkmark or an empty box.
 *
 * Example:
 * getCheckbox(true); // Returns '✓'
 * getCheckbox(false); // Returns '☐'
 */
function getCheckbox(checked) {
  return checked ? colors.green(figures.radioOn) : figures.radioOff;
}
