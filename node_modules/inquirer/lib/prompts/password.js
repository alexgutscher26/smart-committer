/**
 * `password` type prompt
 */

import colors from 'yoctocolors-cjs';
import { map, takeUntil } from 'rxjs';
import observe from '../utils/events.js';
import Base from './base.js';

/**
 * Masks an input string by replacing each character with a specified mask character.
 *
 * @param {string} input - The string to be masked.
 * @param {string} [maskChar=*] - The character used for masking. Defaults to '*'.
 * @returns {string} - The masked string.
 *
 * Example:
 * // Masking a simple string
 * console.log(mask('12345')); // Output: '*****'
 *
 * // Using a custom mask character
 * console.log(mask('abcde', '#')); // Output: '#####'
 */
function mask(input, maskChar) {
  input = String(input);
  maskChar = typeof maskChar === 'string' ? maskChar : '*';
  if (input.length === 0) {
    return '';
  }

  return Array.from({ length: input.length + 1 }).join(maskChar);
}

export default class PasswordPrompt extends Base {

  /**
   * Start the Inquiry session.
   *
   * @param {Function} cb - Callback function to be called when the prompt is done.
   * @return {this}
   */
  _run(cb) {
    this.done = cb;

    const events = observe(this.rl);

    // Once user confirm (enter key)
    const submit = events.line.pipe(map(this.filterInput.bind(this)));

    const validation = this.handleSubmitEvents(submit);
    validation.success.forEach(this.onEnd.bind(this));
    validation.error.forEach(this.onError.bind(this));

    events.keypress
      .pipe(takeUntil(validation.success))
      .forEach(this.onKeypress.bind(this));

    // Init
    this.render();

    return this;
  }


  /**
   * Render the prompt to screen.
   *
   * @param {string} error - An optional error message to display below the prompt.
   * @return {PasswordPrompt} self - Returns the current instance of PasswordPrompt for method chaining.
   */
  render(error) {
    let message = this.getQuestion();
    let bottomContent = '';

    message +=
      this.status === 'answered'
        ? this.getMaskedValue(this.answer)
        : this.getMaskedValue(this.rl.line || '');

    if (error) {
      bottomContent = '\n' + colors.red('>> ') + error;
    }

    this.screen.render(message, bottomContent);
  }

  /**
   * Retrieves a masked version of the provided value based on the current status and options.
   *
   * @param {string} value - The input value to be masked.
   * @returns {string} - The masked value formatted according to the current state and options.
   *
   * @example
   * // Assuming this.status is 'answered' and opt.mask is defined
   * console.log(getMaskedValue('sensitive data')); // Outputs: [cyan]masked data[/cyan]
   *
   * @example
   * // Assuming this.status is not 'answered' and opt.mask is defined
   * console.log(getMaskedValue('sensitive data')); // Outputs: [italic][dim]input is hidden[/dim][/italic]
   */
  getMaskedValue(value) {
    if (this.status === 'answered') {
      return this.opt.mask
        ? colors.cyan(mask(value, this.opt.mask))
        : colors.italic(colors.dim('[hidden]'));
    }
    return this.opt.mask
      ? mask(value, this.opt.mask)
      : colors.italic(colors.dim('[input is hidden] '));
  }

  /**
   * Returns the masked value during async filter/validation.
   *
   * @param {string} value - The input value to be masked.
   * @returns {string} - The masked value.
   */
  getSpinningValue(value) {
    return this.getMaskedValue(value);
  }


  /**
   * Filters the input based on certain conditions.
   *
   * @param {string} input - The input string to be filtered.
   * @returns {string} - The filtered or default input.
   * @throws {Error} - If the input is not a string and not falsy, an error will be thrown.
   */
  filterInput(input) {
    if (!input) {
      return this.opt.default == null ? '' : this.opt.default;
    }

    return input;
  }

  /**
   * Handles the end of a language processing task.
   *
   * @param {Object} state - The current state object containing the answer value.
   * @returns {undefined}
   *
   * This method updates the internal status and answer with the provided state value,
   * re-renders the prompt, marks the screen as done, and calls the done callback
   * with the answer value.
   */
  onEnd(state) {
    this.status = 'answered';
    this.answer = state.value;

    // Re-render prompt
    this.render();

    this.screen.done();
    this.done(state.value);
  }

  /**
   * Handles error state and renders the component accordingly.
   *
   * @param {Object} state - The current state object containing validation information.
   * @param {boolean} state.isValid - Indicates whether the current state is valid or not.
   * @returns {void}
   */
  onError(state) {
    this.render(state.isValid);
  }

  /**
   * Handles the keypress event by clearing the default value if it exists and then re-renders the component.
   *
   * @method onKeypress
   * @this {Component} - The instance of the Component class.
   */
  onKeypress() {
    // If user press a key, just clear the default value
    this.opt.default &&= undefined;

    this.render();
  }
}
