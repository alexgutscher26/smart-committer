/**
 * `password` type prompt
 */

import colors from 'yoctocolors-cjs';
import { map, takeUntil } from 'rxjs';
import observe from '../utils/events.js';
import Base from './base.js';

/**
 * Masks the input string with a specified character.
 *
 * @param {string} input - The string to be masked.
 * @param {string} [maskChar='*'] - The character used for masking. Defaults to '*'.
 * @returns {string} - A new string where all characters are replaced by the mask character.
 * @example
 * mask('hello'); // returns '*****'
 * mask('world', '#'); // returns '#####'
 */
function mask(input, maskChar) {
  input = String(input);
  maskChar = typeof maskChar === 'string' ? maskChar : '*';
  if (input.length === 0) {
    return '';
  }

  return Array.from({ length: input.length + 1 }).join(maskChar);
}

export default class PasswordPrompt extends Base {

  /**
   * Start the Inquiry session.
   *
   * @param {Function} cb - Callback function to be executed when the prompt is completed.
   * @return {this} - The current instance of the class.
   */
  _run(cb) {
    this.done = cb;

    const events = observe(this.rl);

    // Once user confirm (enter key)
    const submit = events.line.pipe(map(this.filterInput.bind(this)));

    const validation = this.handleSubmitEvents(submit);
    validation.success.forEach(this.onEnd.bind(this));
    validation.error.forEach(this.onError.bind(this));

    events.keypress
      .pipe(takeUntil(validation.success))
      .forEach(this.onKeypress.bind(this));

    // Init
    this.render();

    return this;
  }


  /**
   * Represents a password prompt that can render itself to the screen.
   */
  render(error) {
    let message = this.getQuestion();
    let bottomContent = '';

    message +=
      this.status === 'answered'
        ? this.getMaskedValue(this.answer)
        : this.getMaskedValue(this.rl.line || '');

    if (error) {
      bottomContent = '\n' + colors.red('>> ') + error;
    }

    this.screen.render(message, bottomContent);
  }

  /**
   * Returns a masked version of the input value based on the current status and options.
   *
   * @param {string} value - The input value to be masked.
   * @returns {string} - The masked value, colored appropriately based on the status and options.
   *
   * Example:
   * // Assuming an instance with status 'answered' and mask option enabled
   * var result = instance.getMaskedValue('sensitive data');
   * console.log(result); // Outputs: '\x1b[36m****\x1b[0m'
   *
   * // Assuming an instance with default status and no mask option
   * var result = instance.getMaskedValue('sensitive data');
   * console.log(result); // Outputs: '\x1b[3m\x1b[2m[input is hidden] \x1b[0m'
   *
   * @throws {Error} - Throws an error if the input value is undefined or null.
   */
  getMaskedValue(value) {
    if (this.status === 'answered') {
      return this.opt.mask
        ? colors.cyan(mask(value, this.opt.mask))
        : colors.italic(colors.dim('[hidden]'));
    }
    return this.opt.mask
      ? mask(value, this.opt.mask)
      : colors.italic(colors.dim('[input is hidden] '));
  }

  /**
   * Returns a masked value during asynchronous filtering or validation.
   *
   * @param {any} value - The input value to be masked.
   * @returns {Promise<any>} - A promise that resolves with the masked value.
   */
  getSpinningValue(value) {
    return this.getMaskedValue(value);
  }


  /**
   * Filters input text based on certain conditions.
   *
   * @param {string} input - The input string to be filtered.
   * @returns {string} The filtered input string.
   *
   * Example usage:
   * const filteredText = filterInput("Hello World");
   * console.log(filteredText); // Output: "Hello World"
   *
   * If the input is null or undefined, returns a default value if provided in options; otherwise, returns an empty string.
   */
  filterInput(input) {
    if (!input) {
      return this.opt.default == null ? '' : this.opt.default;
    }

    return input;
  }

  /**
   * Handles the end of an interaction or process.
   *
   * This method updates the status to 'answered', stores the answer from the given state,
   * re-renders the prompt, and signals completion by calling `this.screen.done()` and `this.done(state.value)`.
   *
   * @param {Object} state - The current state of the interaction, expected to contain a value property.
   * @throws {Error} If the state does not have a 'value' property.
   */
  onEnd(state) {
    this.status = 'answered';
    this.answer = state.value;

    // Re-render prompt
    this.render();

    this.screen.done();
    this.done(state.value);
  }

  /**
   * Handles an error state by rendering the component based on whether the state is valid or not.
   *
   * @param {Object} state - The current state object.
   * @param {boolean} state.isValid - Indicates if the current state is valid.
   */
  onError(state) {
    this.render(state.isValid);
  }

  /**
   * Clears the default value if it exists and re-renders the component.
   *
   * This method is triggered when a key is pressed. If a default value is set,
   * it will be cleared, and then the component will be re-rendered to reflect this change.
   */
  onKeypress() {
    // If user press a key, just clear the default value
    this.opt.default &&= undefined;

    this.render();
  }
}
