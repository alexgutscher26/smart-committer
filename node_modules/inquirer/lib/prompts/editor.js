/**
 * `editor` type prompt
 */

import colors from 'yoctocolors-cjs';
import { editAsync } from 'external-editor';
import { Subject } from 'rxjs';
import observe from '../utils/events.js';
import Base from './base.js';

export default class EditorPrompt extends Base {

  /**
   * Start the Inquiry session.
   *
   * @param {Function} cb - Callback function to execute when the prompt is completed.
   * @returns {this}
   *
   * Example usage:
   * ```javascript
   * inquirySession._run(function() {
   *   console.log('Prompt completed');
   * });
   * ```
   */
  _run(cb) {
    this.done = cb;

    this.editorResult = new Subject();

    // Open Editor on "line" (Enter Key)
    const events = observe(this.rl);
    this.lineSubscription = events.line.subscribe(this.startExternalEditor.bind(this));
    const waitUserInput =
      this.opt.waitUserInput === undefined ? true : this.opt.waitUserInput;

    // Trigger Validation when editor closes
    const validation = this.handleSubmitEvents(this.editorResult);
    validation.success.forEach(this.onEnd.bind(this));
    validation.error.forEach(this.onError.bind(this));

    // Prevents default from being printed on screen (can look weird with multiple lines)
    this.currentText = this.opt.default;
    this.opt.default = null;

    // Init
    if (waitUserInput) {
      this.render();
    } else {
      this.startExternalEditor();
    }

    return this;
  }


  /**
   * Render the prompt to screen.
   *
   * @param {string} error - An optional error message to display at the bottom of the screen. If provided, it will be displayed in red color.
   * @return {EditorPrompt} self - Returns the current instance of EditorPrompt for method chaining.
   */
  render(error) {
    let bottomContent = '';
    let message = this.getQuestion();

    message +=
      this.status === 'answered'
        ? colors.dim('Received')
        : colors.dim('Press <enter> to launch your preferred editor.');

    if (error) {
      bottomContent = colors.red('>> ') + error;
    }

    this.screen.render(message, bottomContent);
  }


  /**
   * Launches an external editor to allow the user to modify the current text.
   * Pauses the readline interface to prevent input/output interference while the editor is active.
   *
   * @function startExternalEditor
   * @memberof ClassName // Assuming this function belongs to a class named 'ClassName'
   */
  startExternalEditor() {
    // Pause Readline to prevent stdin and stdout from being modified while the editor is showing
    this.rl.pause();
    editAsync(this.currentText, this.endExternalEditor.bind(this), {
      postfix: this.opt.postfix ?? '.txt',
    });
  }

  /**
   * Ends an external editor session by resuming the readline interface and handling the result or error.
   *
   * @param {Error} [error] - The error object if an error occurred during the editor session. If provided, it overrides any result.
   * @param {*} [result] - The result from the external editor session. Ignored if an error is also provided.
   * @returns {void}
   *
   * @example
   * endExternalEditor(new Error('Operation failed'));
   *
   * @example
   * endExternalEditor(null, 'File saved successfully');
   */
  endExternalEditor(error, result) {
    this.rl.resume();
    if (error) {
      this.editorResult.error(error);
    } else {
      this.editorResult.next(result);
    }
  }

  /**
   * Handles the end of the interaction process by unsubscribing from editor and line subscriptions,
   * updating the answer with the state value, setting the status to 'answered', re-rendering the prompt,
   * marking the screen as done, and calling the done callback with the answer.
   *
   * @param {Object} state - The current state object containing the answer value.
   */
  onEnd(state) {
    this.editorResult.unsubscribe();
    this.lineSubscription.unsubscribe();
    this.answer = state.value;
    this.status = 'answered';
    // Re-render prompt
    this.render();
    this.screen.done();
    this.done(this.answer);
  }

  /**
   * Handles error state by rendering validation status.
   *
   * @param {Object} state - The current application state.
   * @param {boolean} state.isValid - Indicates whether the current state is valid.
   * @throws {Error} If `state` parameter is not provided or is invalid.
   */
  onError(state) {
    this.render(state.isValid);
  }
}
