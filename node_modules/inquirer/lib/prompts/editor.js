/**
 * `editor` type prompt
 */

import colors from 'yoctocolors-cjs';
import { editAsync } from 'external-editor';
import { Subject } from 'rxjs';
import observe from '../utils/events.js';
import Base from './base.js';

export default class EditorPrompt extends Base {

  /**
   * Starts the Inquiry session.
   *
   * @param {Function} cb - Callback function to be called when the prompt is completed.
   * @return {this}
   */
  _run(cb) {
    this.done = cb;

    this.editorResult = new Subject();

    // Open Editor on "line" (Enter Key)
    const events = observe(this.rl);
    this.lineSubscription = events.line.subscribe(this.startExternalEditor.bind(this));
    const waitUserInput =
      this.opt.waitUserInput === undefined ? true : this.opt.waitUserInput;

    // Trigger Validation when editor closes
    const validation = this.handleSubmitEvents(this.editorResult);
    validation.success.forEach(this.onEnd.bind(this));
    validation.error.forEach(this.onError.bind(this));

    // Prevents default from being printed on screen (can look weird with multiple lines)
    this.currentText = this.opt.default;
    this.opt.default = null;

    // Init
    if (waitUserInput) {
      this.render();
    } else {
      this.startExternalEditor();
    }

    return this;
  }


  /**
   * Render the prompt to screen.
   *
   * @param {Error} [error] - An optional error object to display at the bottom of the prompt.
   * @return {EditorPrompt} self - Returns the current instance of EditorPrompt for method chaining.
   */
  render(error) {
    let bottomContent = '';
    let message = this.getQuestion();

    message +=
      this.status === 'answered'
        ? colors.dim('Received')
        : colors.dim('Press <enter> to launch your preferred editor.');

    if (error) {
      bottomContent = colors.red('>> ') + error;
    }

    this.screen.render(message, bottomContent);
  }


  /**
   * Launches an external editor to allow user to edit text.
   *
   * This method pauses the Readline interface to prevent any modification of stdin and stdout while the editor is open.
   * It uses the `editAsync` function from a hypothetical module to open the editor, passing the current text, a callback to handle editor completion, and an optional postfix for the file extension.
   *
   * @function
   * @name startExternalEditor
   * @memberof SupportedLanguage.JAVASCRIPT code
   * @instance
   * @param {string} [postfix='.txt'] - Optional file extension for the temporary file created in the editor.
   */
  startExternalEditor() {
    // Pause Readline to prevent stdin and stdout from being modified while the editor is showing
    this.rl.pause();
    editAsync(this.currentText, this.endExternalEditor.bind(this), {
      postfix: this.opt.postfix ?? '.txt',
    });
  }

  /**
   * Ends the external editor session and resumes the readline interface.
   *
   * @param {Error} [error] - An optional error object indicating an error occurred during the editing process.
   * @param {*} result - The result from the external editor, which could be a string or any other data type.
   * @returns {void}
   *
   * Example usage:
   * endExternalEditor(new Error('An error occurred'), null);
   * endExternalEditor(null, 'Saved changes');
   */
  endExternalEditor(error, result) {
    this.rl.resume();
    if (error) {
      this.editorResult.error(error);
    } else {
      this.editorResult.next(result);
    }
  }

  /**
   * Handles the end of an interaction by unsubscribing from subscriptions,
   * updating the answer and status, re-rendering the prompt, marking the screen as done,
   * and completing the interaction with the answer.
   *
   * @param {Object} state - The state object containing the value.
   */
  onEnd(state) {
    this.editorResult.unsubscribe();
    this.lineSubscription.unsubscribe();
    this.answer = state.value;
    this.status = 'answered';
    // Re-render prompt
    this.render();
    this.screen.done();
    this.done(this.answer);
  }

  /**
   * Handles an error state by rendering the component.
   *
   * @param {Object} state - The current state object containing validity information.
   * @param {boolean} state.isValid - Indicates whether the state is valid or not.
   */
  onError(state) {
    this.render(state.isValid);
  }
}
