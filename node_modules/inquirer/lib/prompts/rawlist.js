/**
 * `rawlist` type prompt
 */

import colors from 'yoctocolors-cjs';
import { map, takeUntil } from 'rxjs';
import Separator from '../objects/separator.js';
import observe from '../utils/events.js';
import Paginator from '../utils/paginator.js';
import incrementListIndex from '../utils/incrementListIndex.js';
import Base from './base.js';

export default class RawListPrompt extends Base {
  constructor(questions, rl, answers) {
    super(questions, rl, answers);

    this.hiddenLine = '';
    this.lastKey = '';

    if (!this.opt.choices) {
      this.throwParamError('choices');
    }

    this.opt.validChoices = this.opt.choices.filter(Separator.exclude);

    this.selected = 0;
    this.rawDefault = 0;

    Object.assign(this.opt, {
      validate(val) {
        return val != null;
      },
    });

    const def = this.opt.default;
    if (typeof def === 'number' && def >= 0 && def < this.opt.choices.realLength) {
      this.selected = def;
      this.rawDefault = def;
    } else if (typeof def !== 'number' && def != null) {
      const index = this.opt.choices.realChoices.findIndex(({ value }) => value === def);
      const safeIndex = Math.max(index, 0);
      this.selected = safeIndex;
      this.rawDefault = safeIndex;
    }

    // Make sure no default is set (so it won't be printed)
    this.opt.default = null;

    const shouldLoop = this.opt.loop === undefined ? true : this.opt.loop;
    this.paginator = new Paginator(undefined, { isInfinite: shouldLoop });
  }

  /**
   * Start the Inquiry session
   * @param  {Function} cb      Callback when prompt is done
   * @return {this}
   */

  _run(cb) {
    this.done = cb;

    // Once user confirm (enter key)
    const events = observe(this.rl);
    const submit = events.line.pipe(map(this.getCurrentValue.bind(this)));

    const validation = this.handleSubmitEvents(submit);
    validation.success.forEach(this.onEnd.bind(this));
    validation.error.forEach(this.onError.bind(this));

    events.normalizedUpKey
    events.keypress
      /**
       * Start the Inquiry session.
       *
       * @param {Function} cb - Callback function to be called when the prompt is done.
       * @returns {this} - The current instance of the Inquiry class.
       */
      .pipe(takeUntil(validation.success))
      .forEach(this.onKeypress.bind(this));
    // Init the prompt
    this.render();

    return this;
  }

  /**
   * Render the prompt to screen
   * @return {RawListPrompt} self
   */

  render(error) {
    // Render question
    let message = this.getQuestion();
    let bottomContent = '';

    if (this.status === 'answered') {
      message += colors.cyan(this.opt.choices.getChoice(this.selected).short);
    } else {
      const choicesStr = renderChoices(this.opt.choices, this.selected);
      message +=
        '\n' + this.paginator.paginate(choicesStr, this.selected, this.opt.pageSize);
      message += '\n  Answer: ';
    }
    }
/**
 * Render the prompt to screen.
 *
 * @param {string} error - An optional error message to display below the question.
 * @return {RawListPrompt} self - The current instance of the RawListPrompt.
 */

    this.screen.render(message, bottomContent);
  }

  /**
   * When user press `enter` key
   */

  getCurrentValue(index) {
    if (index == null) {
      index = this.rawDefault;
    } else if (index === '') {
      this.selected = this.selected === undefined ? -1 : this.selected;
      index = this.selected;
    } else {
      index -= 1;
    }

    const choice = this.opt.choices.getChoice(index);
    return choice ? choice.value : null;
  }


    /**
     * Retrieves the value of the selected choice at the given index.
     *
     * @param {number|string} [index] - The index of the choice to retrieve. If not provided, it defaults to the raw default index.
     * @returns {any|null} The value of the selected choice, or null if no choice is found at the given index.
     *
     * @example
     * // Assuming opt.choices has choices with values ['apple', 'banana', 'cherry']
     * const currentValue = getCurrentValue(0); // Returns 'apple'
     * const defaultValue = getCurrentValue(); // Returns value corresponding to rawDefault index
     */
    // Re-render prompt
    this.render();

    this.screen.done();
    this.done(state.value);
  }

  onError() {
    this.render('Please enter a valid index');
  }

  /**
   * When user press a key
   */
/**
 * Handles the end of the interaction by updating the status and answer, rendering the prompt,
 * completing the screen, and calling the done callback with the answer.
 *
 * @param {Object} state - The current state object containing the value to be processed.
 */

  onKeypress() {
    let index;

    if (this.lastKey === 'arrow') {
      index = this.hiddenLine.length > 0 ? Number(this.hiddenLine) - 1 : 0;
    } else {
      index = this.rl.line.length > 0 ? Number(this.rl.line) - 1 : 0;
    }
    this.lastKey = '';

    /**
     * Handles an error by rendering an error message to the user.
     *
     * This method is called when an error occurs that requires user attention. It
     * displays a message prompting the user to enter a valid index.
     */
    this.selected = this.opt.choices.getChoice(index) ? index : undefined;
    this.render();
  }


  /**
   * This function is called when a key is pressed. It determines the index of the selected choice based on the last key pressed.
   * If the last key was 'arrow', it uses the length of hiddenLine to calculate the index; otherwise, it uses the length of rl.line.
   * After determining the index, it sets the lastKey property to an empty string and updates the selected property with the corresponding choice from opt.choices or undefined if no choice exists at that index.
   * Finally, it calls the render method to update the UI.
   *
   * @returns {void}
   */
  onUpKey() {
    this.onArrowKey('up');
  }

  /**
   * When user press down key
   */

  onDownKey() {
    this.onArrowKey('down');
  }

  /**
   * When user press up or down key
  onArrowKey(type) {
    /**
     * Triggers when the user presses the up arrow key.
     *
     * @function onUpKey
     * @this {Object} - The object that owns this method.
     */
    this.selected = incrementListIndex(this.selected, type, this.opt) || 0;
    this.hiddenLine = String(this.selected + 1);
    this.rl.line = '';
    this.lastKey = 'arrow';

/**
 * Triggered when the user presses the down arrow key.
 * Calls the `onArrowKey` method with 'down' as the parameter.
 *
 * @return {void}
 */
/**
 * Renders list choices.
 *
 * @param {Array} choices - The array of choices to render. Each choice can be either an object with a `name` property or a string representing a separator.
 * const choices = [
 /**
  * Handles arrow key presses to navigate through options or list items.
  *
  * @param {String} type - The direction of the arrow press. Can be 'up' or 'down'.
  */
 *   { name: 'Option 1' },
 *   { name: 'Option 2' },
 *   '-',
 *   { name: 'Option 3' }
 * ];
 * console.log(renderChoices(choices, 1));
 * // Output:
 * //   Option 1
 * //   Option 2 (cyan)
 * //   -
 * //   Option 3
 *
 * @throws {Error} - Throws an error if the choices array is empty.
 */
function renderChoices(choices, pointer) {
  let output = '';
  let separatorOffset = 0;

  choices.forEach((choice, i) => {
    output += output ? '\n  ' : '  ';

    if (choice.type === 'separator') {
      separatorOffset++;
      output += ' ' + choice;
      return;
    }

    const index = i - separatorOffset;
    let display = index + 1 + ') ' + choice.name;
    if (index === pointer) {
      display = colors.cyan(display);
    }

    output += display;
  });

  return output;
}
