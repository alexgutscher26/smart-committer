/**
 * `rawlist` type prompt
 */

import colors from 'yoctocolors-cjs';
import { map, takeUntil } from 'rxjs';
import Separator from '../objects/separator.js';
import observe from '../utils/events.js';
import Paginator from '../utils/paginator.js';
import incrementListIndex from '../utils/incrementListIndex.js';
import Base from './base.js';

export default class RawListPrompt extends Base {
  constructor(questions, rl, answers) {
    super(questions, rl, answers);

    this.hiddenLine = '';
    this.lastKey = '';

    if (!this.opt.choices) {
      this.throwParamError('choices');
    }

    this.opt.validChoices = this.opt.choices.filter(Separator.exclude);

    this.selected = 0;
    this.rawDefault = 0;

    Object.assign(this.opt, {
      validate(val) {
        return val != null;
      },
    });

    const def = this.opt.default;
    if (typeof def === 'number' && def >= 0 && def < this.opt.choices.realLength) {
      this.selected = def;
      this.rawDefault = def;
    } else if (typeof def !== 'number' && def != null) {
      const index = this.opt.choices.realChoices.findIndex(({ value }) => value === def);
      const safeIndex = Math.max(index, 0);
      this.selected = safeIndex;
      this.rawDefault = safeIndex;
    }

    // Make sure no default is set (so it won't be printed)
    this.opt.default = null;

    const shouldLoop = this.opt.loop === undefined ? true : this.opt.loop;
    this.paginator = new Paginator(undefined, { isInfinite: shouldLoop });
  }

  /**
   * Start the Inquiry session
    this.done = cb;
/**
 * Start the Inquiry session.
 *
 * @param {Function} cb - Callback function to be executed when the prompt is completed.
 * @return {this} - Returns the current instance of the class.
 */

    // Once user confirm (enter key)
    const events = observe(this.rl);
    const submit = events.line.pipe(map(this.getCurrentValue.bind(this)));

    const validation = this.handleSubmitEvents(submit);
    validation.success.forEach(this.onEnd.bind(this));
    validation.error.forEach(this.onError.bind(this));

    events.normalizedUpKey
      .pipe(takeUntil(validation.success))
      .forEach(this.onUpKey.bind(this));
    events.normalizedDownKey
      .pipe(takeUntil(validation.success))
      .forEach(this.onDownKey.bind(this));
    events.keypress
      .pipe(takeUntil(validation.success))
      .forEach(this.onKeypress.bind(this));
    // Init the prompt
    this.render();

    return this;
  }

  /**
   * Render the prompt to screen
    // Render question
    /**
     * Renders the prompt to the screen.
     *
     * @param {Error} [error] - An optional error object to display at the bottom of the prompt.
     * @returns {RawListPrompt} - The current instance of `RawListPrompt`.
     */
    let message = this.getQuestion();
    let bottomContent = '';

    if (this.status === 'answered') {
      message += colors.cyan(this.opt.choices.getChoice(this.selected).short);
    } else {
      const choicesStr = renderChoices(this.opt.choices, this.selected);
      message +=
        '\n' + this.paginator.paginate(choicesStr, this.selected, this.opt.pageSize);
      message += '\n  Answer: ';
    }
    message += this.rl.line;

    if (error) {
      bottomContent = '\n' + colors.red('>> ') + error;
    }

    this.screen.render(message, bottomContent);
  }

  /**
   * When user press `enter` key
    if (index == null) {
      /**
       * Retrieves the value at the specified index from the choices.
       *
       * @param {number} [index] - The index of the choice to retrieve. If null, uses the default raw value.
       * @returns {any|null} The value of the choice at the given index, or null if not found.
       * @throws {Error} Throws an error if the index is out of bounds and cannot be retrieved.
       */
      index = this.rawDefault;
    } else if (index === '') {
      this.selected = this.selected === undefined ? -1 : this.selected;
      index = this.selected;
    } else {
      index -= 1;
    }

    const choice = this.opt.choices.getChoice(index);
    return choice ? choice.value : null;
  }

  onEnd(state) {
    this.status = 'answered';
    /**
     * Handles the end of a state by setting the status to 'answered',
     * storing the answer from the state, re-rendering the prompt,
     * completing the screen, and finalizing the process with the stored answer.
     *
     * @param {Object} state - The current state object containing the answer value.
     * @returns {void}
     */
    this.answer = state.value;

    // Re-render prompt
    this.render();

    this.screen.done();
    this.done(state.value);
  }

  onError() {
    this.render('Please enter a valid index');
  /**
   * Handles error scenarios by rendering an error message.
   *
   * This method is called when an invalid index is provided. It updates the UI to display a message
   * prompting the user to enter a valid index.
   *
   * @return {void}
   */
  }

  /**
   * When user press a key
    let index;
/**
 * Handles the keypress event when a user presses a key.
 *
 * @description
 * This method updates the selected choice based on the last pressed key and re-renders the selection interface.
 *
 * @this {SelectionInterface}
 * @param {Event} event - The keypress event object.
 */

    if (this.lastKey === 'arrow') {
      index = this.hiddenLine.length > 0 ? Number(this.hiddenLine) - 1 : 0;
    } else {
      index = this.rl.line.length > 0 ? Number(this.rl.line) - 1 : 0;
    }
    this.lastKey = '';

    this.selected = this.opt.choices.getChoice(index) ? index : undefined;
    this.render();
  }

  /**
   * When user press up key
    this.onArrowKey('up');
  /**
   * Triggered when the user presses the up key.
   *
   * @function onUpKey
   */
  }

  /**
   * When user press down key
    this.onArrowKey('down');
  /**
   * Handles the down key press event.
   *
   * @public
   */
  }

  /**
   * When user press up or down key
    this.selected = incrementListIndex(this.selected, type, this.opt) || 0;
    /**
     * Handles arrow key presses to navigate through a list.
     *
     * @param {string} type - The direction of the arrow key press ('up' or 'down').
     */
    this.hiddenLine = String(this.selected + 1);
    this.rl.line = '';
    this.lastKey = 'arrow';
  }
}


/**
 * Function for rendering list choices
 *
 * @param {Array<Object>} choices - Array of choice objects to render
 * @param {Number} pointer - Position of the pointer indicating the selected choice
 * @return {String} - Rendered content as a string
 */
function renderChoices(choices, pointer) {
  let output = '';
  let separatorOffset = 0;

  choices.forEach((choice, i) => {
    output += output ? '\n  ' : '  ';

    if (choice.type === 'separator') {
      separatorOffset++;
      output += ' ' + choice;
      return;
    }

    const index = i - separatorOffset;
    let display = index + 1 + ') ' + choice.name;
    if (index === pointer) {
      display = colors.cyan(display);
    }

    output += display;
  });

  return output;
}
