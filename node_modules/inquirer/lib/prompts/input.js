/**
 * `input` type prompt
 */

import colors from 'yoctocolors-cjs';
import { map, takeUntil } from 'rxjs';
import observe from '../utils/events.js';
import Base from './base.js';

export default class InputPrompt extends Base {

  /**
   * Start the Inquiry session.
   *
   * @param {Function} cb - Callback function to be called when the prompt is done.
   * @returns {this}
   *
   * @example
   * inquiryInstance._run(() => {
   *   console.log('Inquiry completed.');
   * });
   */
  _run(cb) {
    this.done = cb;

    // Once user confirm (enter key)
    const events = observe(this.rl);
    const submit = events.line.pipe(map(this.filterInput.bind(this)));

    const validation = this.handleSubmitEvents(submit);
    validation.success.forEach(this.onEnd.bind(this));
    validation.error.forEach(this.onError.bind(this));

    events.keypress
      .pipe(takeUntil(validation.success))
      .forEach(this.onKeypress.bind(this));

    // Init
    this.render();

    return this;
  }


  /**
   * Render the prompt to screen.
   *
   * @param {Error} [error] - An optional error object to display at the bottom of the prompt.
   * @returns {InputPrompt} - The current instance of `InputPrompt` for method chaining.
   *
   * @example
   * inputPrompt.render();
   * inputPrompt.render(new Error('Invalid input'));
   */
  render(error) {
    let bottomContent = '';
    let appendContent = '';
    let message = this.getQuestion();
    const { transformer } = this.opt;
    const isFinal = this.status === 'answered';

    appendContent = isFinal ? this.answer : this.rl.line;

    if (transformer) {
      message += transformer(appendContent, this.answers, { isFinal });
    } else {
      message += isFinal ? colors.cyan(appendContent) : appendContent;
    }

    if (error) {
      bottomContent = colors.red('>> ') + error;
    }

    this.screen.render(message, bottomContent);
  }


  /**
   * Filters user input when the `enter` key is pressed.
   *
   * @param {string} input - The user input to be filtered.
   * @return {string} - The filtered input, or a default value if input is null or undefined.
   * @throws {Error} - Throws an error if input is not of type string.
   */
  filterInput(input) {
    if (!input) {
      return this.opt.default == null ? '' : this.opt.default;
    }

    return input;
  }

  /**
   * Callback method that is invoked when the user has provided an answer to the prompt.
   *
   * @param {Object} state - The current state of the interaction, containing the value provided by the user.
   * @throws {Error} If the state parameter is not valid or undefined.
   */
  onEnd(state) {
    this.answer = state.value;
    this.status = 'answered';

    // Re-render prompt
    this.render();

    this.screen.done();
    this.done(state.value);
  }

  /**
   * Handles an error by appending the value to the readline interface's line and cursor,
   * and then renders the readline interface with the specified validity status.
   *
   * @param {Object} options - The options object containing the error details.
   * @param {string} [options.value=''] - The error message or value to append. Default is an empty string.
   * @param {boolean} isValid - Indicates whether the input is valid after handling the error.
   */
  onError({ value = '', isValid }) {
    this.rl.line += value;
    this.rl.cursor += value.length;
    this.render(isValid);
  }


  /**
   * This method is called when a key is pressed by the user.
   *
   * @function onKeypress
   * @return {void}
   */
  onKeypress() {
    this.status = 'touched';

    this.render();
  }
}
