/**
 * `rawlist` type prompt
 */

import colors from 'yoctocolors-cjs';
import { map, takeUntil } from 'rxjs';
import Separator from '../objects/separator.js';
import observe from '../utils/events.js';
import Paginator from '../utils/paginator.js';
import Base from './base.js';

export default class ExpandPrompt extends Base {
  constructor(questions, rl, answers) {
    super(questions, rl, answers);

    if (!this.opt.choices) {
      this.throwParamError('choices');
    }

    this.validateChoices(this.opt.choices);

    // Add the default `help` (/expand) option
    this.opt.choices.push({
      key: 'h',
      name: 'Help, list all options',
      value: 'help',
    });

    this.opt.validate = (choice) => {
      if (choice == null) {
        return 'Please enter a valid command';
      }

      return choice !== 'help';
    };

    // Setup the default string (capitalize the default key)
    this.opt.default = this.generateChoicesString(this.opt.choices, this.opt.default);

    this.paginator = new Paginator(this.screen);
  }

  /**
   * Start the Inquiry session
    this.done = cb;
/**
 * Starts an Inquiry session.
 *
 * @param {Function} cb - Callback function to be executed when the prompt is completed.
 * @returns {this} - Returns the current instance of the object, allowing for method chaining.
 *
 * Example usage:
 * ```
 * const inquiry = new Inquiry();
 * inquiry._run(() => {
 *   console.log('Prompt completed');
 * });
 * ```
 */

    // Save user answer and update prompt to show selected option.
    const events = observe(this.rl);
    const validation = this.handleSubmitEvents(
      events.line.pipe(map(this.getCurrentValue.bind(this))),
    );
    validation.success.forEach(this.onSubmit.bind(this));
    validation.error.forEach(this.onError.bind(this));
    this.keypressObs = events.keypress
      .pipe(takeUntil(validation.success))
      .forEach(this.onKeypress.bind(this));

    // Init the prompt
    this.render();

    return this;
  }

  /**
   * Render the prompt to screen
    let message = this.getQuestion();
    /**
     * Render the prompt to screen.
     *
     * @param {string} error - An optional error message to display at the bottom of the prompt.
     * @param {string} hint - An optional hint message to display at the bottom of the prompt.
     * @return {ExpandPrompt} self - The current instance of ExpandPrompt.
     */
    let bottomContent = '';

    if (this.status === 'answered') {
      message += colors.cyan(this.answer);
    } else if (this.status === 'expanded') {
      const choicesStr = renderChoices(this.opt.choices, this.selectedKey);
      message += this.paginator.paginate(choicesStr, this.selectedKey, this.opt.pageSize);
      message += '\n  Answer: ';
    }

    message += this.rl.line;

    if (error) {
      bottomContent = colors.red('>> ') + error;
    }

    if (hint) {
      bottomContent = colors.cyan('>> ') + hint;
    }

    this.screen.render(message, bottomContent);
  }

  getCurrentValue(input) {
    input ||= this.rawDefault;
/**
 * Retrieves the value of a selected option based on the input key.
 *
 * @param {string} input - The key to look for in the options. It is trimmed and converted to lowercase before searching.
 * @returns {*} - The value of the selected option if found, otherwise null.
 *
 * @example
 * // Assuming opt.choices = [{ key: 'java', value: 'Java' }, { key: 'js', value: 'JavaScript' }]
 * const result = getCurrentValue(' js ');
 * console.log(result); // Output: 'JavaScript'
 */

    const selected = this.opt.choices.where({ key: input.toLowerCase().trim() })[0];
    if (!selected) {
      return null;
    }

    return selected.value;
  }

  /**
   * Generate the prompt choices string
   * @return {String}  Choices string
   */

  getChoices() {
    let output = '';

    this.opt.choices.forEach((choice) => {
      output += '\n  ';

      if (choice.type === 'separator') {
        output += ' ' + choice;
        return;
      }

      let choiceStr = choice.key + ') ' + choice.name;
      if (this.selectedKey === choice.key) {
        choiceStr = colors.cyan(choiceStr);
      }

      output += choiceStr;
    });

    return output;
  }

  onError(state) {
    if (state.value === 'help') {
      /**
       * Handles error states based on the provided state object.
       *
       * @param {Object} state - The current state object containing information about the error.
       * @param {string} state.value - The value indicating the type of error or action to take.
       * @param {boolean} state.isValid - Indicates whether the current state is valid or not.
       * @returns {void}
       *
       * If `state.value` is 'help', it resets the selectedKey, sets the status to 'expanded',
       * and calls the render method. Otherwise, it simply calls the render method with the isValid flag.
       */
      this.selectedKey = '';
      this.status = 'expanded';
      this.render();
      return;
    }

    this.render(state.isValid);
  }

  /**
   * When user press `enter` key
    this.status = 'answered';
    /**
     * Handles the submission of user input when the `enter` key is pressed.
     *
     * @param {Object} state - The current state of the application, containing user input.
     */
    const choice = this.opt.choices.where({ value: state.value })[0];
    this.answer = choice.short || choice.name;

    // Re-render prompt
    this.render();
    this.screen.done();
    this.done(state.value);
  }

  /**
   * When user press a key
    this.selectedKey = this.rl.line.toLowerCase();
    /**
     * Handles the keypress event.
     *
     * This method is triggered when a user presses a key. It processes the selected key,
     * updates the internal state based on the current status, and renders the UI accordingly.
     *
     * @return {void} - This method does not return any value.
     */
    const selected = this.opt.choices.where({ key: this.selectedKey })[0];
    if (this.status === 'expanded') {
      this.render();
    } else {
      this.render(null, selected ? selected.name : null);
    }
  }

  /**
   * Validate the choices
    let formatError;
    /**
     * Validates an array of choices to ensure each choice has a unique, single-letter key that is not reserved.
     *
     * @param {Array} choices - The array of choices to validate. Each choice should be an object with at least a 'key' property.
     * @throws {Error} - Throws an error if any choice does not have a valid key (must be a single letter and unique), or if the reserved key 'h' is used.
     */
    const errors = [];
    const keymap = {};
    choices.filter(Separator.exclude).forEach((choice) => {
      if (!choice.key || choice.key.length !== 1) {
        formatError = true;
      }

      choice.key = String(choice.key).toLowerCase();

      if (keymap[choice.key]) {
        errors.push(choice.key);
      }

      keymap[choice.key] = true;
    });

    if (formatError) {
      throw new Error(
        'Format error: `key` param must be a single letter and is required.',
      );
    }

    if (keymap.h) {
      throw new Error(
        'Reserved key error: `key` param cannot be `h` - this value is reserved.',
      );
    }

    if (errors.length > 0) {
      throw new Error(
        'Duplicate key error: `key` param must be unique. Duplicates: ' +
          [...new Set(errors)].join(','),
      );
    }
  }

  /**
   * Generate a string out of the choices keys
    /**
     * Generate a string out of the choices keys.
     *
     * @param {Array} choices - An array containing choice objects with keys.
     * @param {Number|String} defaultChoice - The choice index or name to capitalize. If a number, it should be a valid index within the choices array. If a string, it should match one of the 'value' properties in the choices array.
     * @return {String} - The rendered choices key string with the default choice capitalized.
     *
     * @throws {Error} - Throws an error if defaultChoice is not a number or string.
     * @throws {Error} - Throws an error if the provided index for defaultChoice does not exist in the choices array.
     */
    if (typeof defaultChoice === 'number' && this.opt.choices.getChoice(defaultChoice)) {
      defIndex = defaultChoice;
    } else if (typeof defaultChoice === 'string') {
      const index = choices.realChoices.findIndex(({ value }) => value === defaultChoice);
      defIndex = index === -1 ? defIndex : index;
    }

    const defStr = this.opt.choices.pluck('key');
    this.rawDefault = defStr[defIndex];
    defStr[defIndex] = String(defStr[defIndex]).toUpperCase();
    return defStr.join('');
  }
}


/**
 * Function for rendering checkbox choices.
 *
 * @param {Array} choices - Array of choice objects to be rendered.
 * @param {String} pointer - The currently selected key.
 * @return {String} Rendered content as a string.
 */
function renderChoices(choices, pointer) {
  let output = '';

  choices.forEach((choice) => {
    output += '\n  ';

    if (choice.type === 'separator') {
      output += ' ' + choice;
      return;
    }

    let choiceStr = choice.key + ') ' + choice.name;
    if (pointer === choice.key) {
      choiceStr = colors.cyan(choiceStr);
    }

    output += choiceStr;
  });

  return output;
}
