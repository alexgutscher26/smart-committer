/**
 * `list` type prompt
 */

import ansiEscapes from 'ansi-escapes';
import colors from 'yoctocolors-cjs';
import figures from '@inquirer/figures';
import runAsync from 'run-async';
import { flatMap, map, take, takeUntil } from 'rxjs';
import observe from '../utils/events.js';
import Paginator from '../utils/paginator.js';
import incrementListIndex from '../utils/incrementListIndex.js';
import Base from './base.js';

export default class ListPrompt extends Base {
  constructor(questions, rl, answers) {
    super(questions, rl, answers);

    if (!this.opt.choices) {
      this.throwParamError('choices');
    }

    this.firstRender = true;
    this.selected = 0;

    const def = this.opt.default;

    // If def is a Number, then use as index. Otherwise, check for value.
    if (typeof def === 'number' && def >= 0 && def < this.opt.choices.realLength) {
      this.selected = def;
    } else if (typeof def !== 'number' && def != null) {
      const index = this.opt.choices.realChoices.findIndex(({ value }) => value === def);
      this.selected = Math.max(index, 0);
    }

    // Make sure no default is set (so it won't be printed)
    this.opt.default = null;

    const shouldLoop = this.opt.loop === undefined ? true : this.opt.loop;
    this.paginator = new Paginator(this.screen, { isInfinite: shouldLoop });
  }

  /**
   * Start the Inquiry session
    this.done = cb;
/**
 * Start the Inquiry session.
 *
 * @param {Function} cb - Callback function to execute when the prompt is completed. This function will be called without parameters upon completion of the inquiry session.
 * @return {this} - Returns the current instance of the class, allowing for method chaining.
 *
 * Example usage:
 * myInquiryInstance._run(() => {
 *   console.log('Inquiry session completed');
 * });
 */

    const events = observe(this.rl);
    events.normalizedUpKey.pipe(takeUntil(events.line)).forEach(this.onUpKey.bind(this));
    events.normalizedDownKey
      .pipe(takeUntil(events.line))
      .forEach(this.onDownKey.bind(this));
    events.numberKey.pipe(takeUntil(events.line)).forEach(this.onNumberKey.bind(this));
    events.line
      .pipe(
        take(1),
        map(this.getCurrentValue.bind(this)),
        flatMap((value) =>
          runAsync(this.opt.filter)(value, this.answers).catch((error) => error),
        ),
      )
      .forEach(this.onSubmit.bind(this));

    // Init the prompt
    this.render();

    return this;
  }

  /**
   * Render the prompt to screen
    // Render question
    /**
     * Render the prompt to screen.
     *
     * @return {ListPrompt} Returns the current instance for method chaining.
     */
    let message = this.getQuestion();

    if (this.firstRender) {
      message += colors.dim('(Use arrow keys)');
    }

    // Render choices or answer depending on the state
    if (this.status === 'answered') {
      message += colors.cyan(this.opt.choices.getChoice(this.selected).short);
    } else {
      const choicesStr = listRender(this.opt.choices, this.selected);
      const indexPosition = this.opt.choices.indexOf(
        this.opt.choices.getChoice(this.selected),
      );
      const realIndexPosition =
        this.opt.choices.reduce((acc, value, i) => {
          // Dont count lines past the choice we are looking at
          if (i > indexPosition) {
            return acc;
          }
          // Add line if it's a separator
          if (value.type === 'separator') {
            return acc + 1;
          }

          let l = value.name;
          // Non-strings take up one line
          if (typeof l !== 'string') {
            return acc + 1;
          }

          // Calculate lines taken up by string
          l = l.split('\n');
          return acc + l.length;
        }, 0) - 1;
      message +=
        '\n' + this.paginator.paginate(choicesStr, realIndexPosition, this.opt.pageSize);
    }

    message += ansiEscapes.cursorHide;
    this.firstRender = false;

    this.screen.render(message);
  }

  /**
   * When user press `enter` key
    this.status = 'answered';
/**
 * Handles the submission of a value when the user presses the 'enter' key.
 *
 * @param {string} value - The value submitted by the user.
 * @returns {void}
 */

    // Rerender prompt
    this.render();

    this.screen.done();
    this.done(value);
  }

  getCurrentValue() {
    return this.opt.choices.getChoice(this.selected).value;
  /**
   * Retrieves the current value of the selected choice.
   *
   * @return {any} The value of the currently selected choice.
   * @throws {Error} If no choice is selected.
   */
  }

  /**
   * When user press a key
    /**
     * Handles the key press event when the user presses the up arrow key.
     *
     * Increments the selected index in the list by one position upwards and re-renders the UI.
     *
     * @public
     */
    this.render();
  }

  onDownKey() {
    this.selected = incrementListIndex(this.selected, 'down', this.opt);
    /**
     * Handles the key down event to navigate through options in a list by selecting the next item.
     *
     * @function onDownKey
     * @memberof <ParentClass>
     * @instance
     */
    this.render();
  }

  onNumberKey(input) {
    if (input <= this.opt.choices.realLength) {
      /**
       * Handles input when a number key is pressed.
       *
       * @param {number} input - The number input from the user.
       */
      this.selected = input - 1;
    }

    this.render();
  }
}

/**
 * Function for rendering list choices.
 *
 * @param {Array} choices - An array of choice objects to render.
 * @param {Number} pointer - The position of the pointer in the choices array.
 * @return {String} - Rendered content as a string.
 */
function listRender(choices, pointer) {
  let output = '';
  let separatorOffset = 0;

  choices.forEach((choice, i) => {
    if (choice.type === 'separator') {
      separatorOffset++;
      output += '  ' + choice + '\n';
      return;
    }

    if (choice.disabled) {
      separatorOffset++;
      output += '  - ' + choice.name;
      output += ` (${
        typeof choice.disabled === 'string' ? choice.disabled : 'Disabled'
      })`;
      output += '\n';
      return;
    }

    const isSelected = i - separatorOffset === pointer;
    let line = (isSelected ? figures.pointer + ' ' : '  ') + choice.name;
    if (isSelected) {
      line = colors.cyan(line);
    }

    output += line + ' \n';
  });

  return output.replaceAll(/\n$/g, '');
}
